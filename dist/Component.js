var Component;(()=>{"use strict";var t={676:(t,e,n)=>{var i,o,a,r;n.d(e,{VERTICAL_REFERENCE:()=>a}),function(t){t[t.PIXEL=0]="PIXEL",t[t.PERCENTAGE=1]="PERCENTAGE"}(i||(i={})),function(t){t[t.HORIZONTAL=0]="HORIZONTAL",t[t.VERTICAL=1]="VERTICAL"}(o||(o={})),function(t){t[t.FROM_TOP=0]="FROM_TOP",t[t.FROM_BOTTOM=1]="FROM_BOTTOM"}(a||(a={})),function(t){t[t.R=0]="R",t[t.G=1]="G",t[t.B=2]="B",t[t.A=3]="A"}(r||(r={}))}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var a=e[i]={exports:{}};return t[i](a,a.exports,n),a.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{n.r(i),n.d(i,{Component:()=>e});var t=n(676);class e{position;container;fadeInAnimation;fadeOutAnimation;constructor(t,e,n,i){this.container=t,this.fadeInAnimation=n,this.fadeOutAnimation=i,e&&this.setupPosition(e)}async build(t){t&&t.mainLayer&&t.mainLayer.element.insertAdjacentElement("beforeend",this.container),this.container.style.display="flex",this.fadeInAnimation&&await this.fadeInAnimation.animate(this)}setupPosition(e){this.position=e,this.container.style.position="absolute",this.container.style.display="none",this.container.style.left=e.horizontal,e.verticalReference===t.VERTICAL_REFERENCE.FROM_TOP?this.container.style.top=e.vertical:this.container.style.bottom=e.vertical}async destroy(){this.fadeOutAnimation&&await this.fadeOutAnimation.animate(this),this.container.style.display="none"}}})(),Component=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,