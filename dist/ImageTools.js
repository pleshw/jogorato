var ImageTools;(()=>{"use strict";var t={605:(t,e,n)=>{n.d(e,{getColorPaletteByContext:()=>o});var r=n(676),a=n(173);function i(t,e){return new a.ColorRGBA(e[t],e[t+1],e[t+2],e[t+3]/255)}function o(t,e=0){return s(function(t,e=4){const n=t.getImageData(0,0,t.canvas.width,t.canvas.height).data,r=[];for(var a=n.length;a>=0;a-=e)r.push(i(a,n));return r}(t),e)}function s(t,e=0){if(6===e||0===t.length){const e=t.reduce(((t,e)=>a.ColorRGBA.isValid(t)&&a.ColorRGBA.isValid(e)?(a.ColorRGBA.isValid(e)&&(t.r+=e.r,t.g+=e.g,t.b+=e.b,t.a+=e.a),t):a.ColorRGBA.NULL),a.ColorRGBA.NULL);return a.ColorRGBA.NULL.equals(e)?[a.ColorRGBA.NULL]:[new a.ColorRGBA(Math.round(e.r/t.length),Math.round(e.g/t.length),Math.round(e.b/t.length),Math.round(e.a/t.length))]}const n=function(t){let e=Number.MAX_VALUE,n=Number.MAX_VALUE,a=Number.MAX_VALUE,i=Number.MIN_VALUE,o=Number.MIN_VALUE,s=Number.MIN_VALUE;t.forEach((t=>{e=Math.min(e,t.r),n=Math.min(n,t.g),a=Math.min(a,t.b),i=Math.max(i,t.r),o=Math.max(o,t.g),s=Math.max(s,t.b)}));const c=i-e,u=o-n,h=s-a,g=Math.max(c,u,h);return g===c?r.COLOR_CHANNEL.R:g===u?r.COLOR_CHANNEL.G:r.COLOR_CHANNEL.B}(t);t.sort(((t,e)=>{switch(n){case r.COLOR_CHANNEL.R:return t.r-e.r;case r.COLOR_CHANNEL.G:return t.g-e.g;case r.COLOR_CHANNEL.B:return t.b-e.b;default:return t.r-e.r}}));const i=t.length/2;return a.ColorRGBA.getUnique([...s(t.slice(0,i),e+1),...s(t.slice(i+1),e+1)].filter((t=>!t.equals(a.ColorRGBA.NULL))))}},173:(t,e,n)=>{n.d(e,{ColorRGBA:()=>a});var r=n(19);class a{r;g;b;a;constructor(t,e,n,a=1){this.r=(0,r.clamp)(t,0,255),this.g=(0,r.clamp)(e,0,255),this.b=(0,r.clamp)(n,0,255),this.a=(0,r.clamp)(a,0,255)}toString(){return`${this.r}, ${this.g}, ${this.b}, ${this.a}`}toStringWithoutAlpha(){return`${this.r}, ${this.g}, ${this.b}`}asArray({noAlpha:t=!1}={}){return t?[this.r,this.g,this.b]:[this.r,this.g,this.b,this.a]}getCopy(){return new a(this.r,this.g,this.b,this.a)}static increaseSaturation(t,e){e/=100;const n=Math.max(...t.asArray({noAlpha:!0})),a=t.getCopy();return a.r=Math.floor((0,r.clamp)(t.r===n?t.r+t.r*e:t.r-t.r*e,0,255)),a.g=Math.floor((0,r.clamp)(t.g===n?t.g+t.g*e:t.g-t.g*e,0,255)),a.b=Math.floor((0,r.clamp)(t.b===n?t.b+t.b*e:t.b-t.b*e,0,255)),a}static getUnique(t,e=!0){return t.filter(((t,e,n)=>n.findIndex((e=>JSON.stringify(t)===JSON.stringify(e)))===e)).filter((t=>!e||a.isValid(t)&&t.a>0))}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b,yield this.a}equals(t){return this.r===t.r&&this.g===t.g&&this.b===t.b&&this.a===t.a}static isValid(t){return!("number"!=typeof t.r||Number.isNaN(t.r)||"number"!=typeof t.g||Number.isNaN(t.g)||"number"!=typeof t.b||Number.isNaN(t.b)||"number"!=typeof t.a||Number.isNaN(t.a))}static get BLACK(){return new a(0,0,0)}static get NULL(){return new a(0,0,0,0)}}},234:(t,e,n)=>{n.d(e,{getFileExtension:()=>a});var r=n(902);function a(t){if((0,r.isNullOrEmpty)(t))return"";const e=t.split(".").pop();if(e&&e!==t)return e;const n=t.split("/").pop();return n&&n!==t?n:""}},19:(t,e,n)=>{function r(t=0,e=0,n=100){return Math.max(e,Math.min(t,n))}n.d(e,{clamp:()=>r})},902:(t,e,n)=>{function r(t){return"string"!=typeof t||!t||""===t}n.d(e,{isNullOrEmpty:()=>r})},676:(t,e,n)=>{var r,a,i,o;n.d(e,{COLOR_CHANNEL:()=>o}),function(t){t[t.PIXEL=0]="PIXEL",t[t.PERCENTAGE=1]="PERCENTAGE"}(r||(r={})),function(t){t[t.HORIZONTAL=0]="HORIZONTAL",t[t.VERTICAL=1]="VERTICAL"}(a||(a={})),function(t){t[t.FROM_TOP=0]="FROM_TOP",t[t.FROM_BOTTOM=1]="FROM_BOTTOM"}(i||(i={})),function(t){t[t.R=0]="R",t[t.G=1]="G",t[t.B=2]="B",t[t.A=3]="A"}(o||(o={}))}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};(()=>{n.r(r),n.d(r,{calculateAspectRatioFit:()=>a,drawImageOnCanvas:()=>m,getCanvasResizeImage:()=>g,getGradientByImageInputId:()=>f,getGradientByImageURL:()=>y,getGradientFromPalette:()=>b,getImageByBlob:()=>c,getImageByInputId:()=>s,getImageByURL:()=>o,getImagePaletteByInputId:()=>d,getImagePaletteByURL:()=>l,getImageResizeDimensionsKeepAspectRatio:()=>i,previewImage:()=>C,resizeImage:()=>w,resizeImageFromInput:()=>u,resizeImageFromURL:()=>h,setElementBackgroundGradientByCanvasContext:()=>p});var t=n(605),e=n(234);function a(t,e){const n=Math.min(e.width/t.width,e.height/t.height);return{width:t.width*n,height:t.height*n}}function i({srcDimensions:t,outputDimensions:e}){if(e.width&&e.width>0){const n=e.width/t.width;return{width:e.width,height:t.height*n}}if(e.height&&e.height>0){const n=e.height/t.height;return{width:t.width*n,height:e.height}}return{width:t.width,height:t.height}}async function o(t){return new Promise((async n=>{const r=new Image;r.src=await fetch(t).then((t=>t.blob())).then((t=>URL.createObjectURL(t))),r.setAttribute("type",(0,e.getFileExtension)(t)),r.onload=()=>{n(r)}}))}async function s(t){return new Promise((async n=>{const r=new Image;let a=document.getElementById(t).files;a&&a.length>0&&(r.src=URL.createObjectURL(a.item(0)),r.setAttribute("type",(0,e.getFileExtension)(a.item(0).type)),r.onload=()=>{n(r)})}))}async function c(t){return new Promise((async e=>{const n=new Image;return n.src=URL.createObjectURL(t),n.onload=()=>{e(n)},n}))}async function u(t,e){return await s(t).then((t=>w(t,e)))}async function h(t,e){return await o(t).then((t=>w(t,e)))}async function g(t,e,n){const r=n&&n.resultCanvasId&&document.getElementById(n.resultCanvasId)||document.createElement("canvas"),a=n&&n.resultCanvasContext?n.resultCanvasContext:r.getContext("2d"),o=i({srcDimensions:t,outputDimensions:e});r.width=o.width,r.height=o.height;const s=n&&n.resizeCanvasId&&document.getElementById(n.resizeCanvasId)||document.createElement("canvas"),c=n&&n.resizeCanvasContext?n.resizeCanvasContext:r.getContext("2d");return s.width=o.width,s.height=o.height,c.drawImage(t,0,0,s.width,s.height),c.drawImage(t,0,0,s.width,s.height),a.drawImage(s,0,0,s.width,s.height,0,0,r.width,r.height),{canvas:r,context:a}}async function l(e,n=2){const r=await o(e),a=(await m(r)).context;return(0,t.getColorPaletteByContext)(a,n)}async function d(e,n=2){const r=await s(e),a=(await m(r)).context;return(0,t.getColorPaletteByContext)(a,n)}async function m(t){const e=document.createElement("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d",{alpha:!0,willReadFrequently:!0});return n.drawImage(t,0,0),{canvas:e,context:n}}async function y(t){return b(await l(t))}async function f(t){return b(await d(t))}function b(t){return t.map((t=>`rgba(${t.toString()})`)).join(", ").trim()}function p(e,n){const r=b((0,t.getColorPaletteByContext)(n,2));e.style.backgroundImage=`linear-gradient(${r})`}async function w(t,e){const n=await(await g(t,e)).canvas;return new Promise((async e=>{n.toBlob((t=>e(t)),`image/${t.getAttribute("type")||"png"}`)}))}function C({defaultImageSrc:t,uploadImageInputId:e,previewImageElementId:n}){let r;e&&(r=document.getElementById(e).files);const a=document.getElementById(n);if(!r||r.length<1)return a.src=t,void(a.style.cursor="default");{const t=URL.createObjectURL(r.item(0));a.src=t,a.onclick=e=>window.open(t,"_blank"),a.style.cursor="pointer"}}})(),ImageTools=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,