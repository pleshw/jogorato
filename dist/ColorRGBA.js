var ColorRGBA;(()=>{"use strict";var t={19:(t,r,e)=>{function i(t=0,r=0,e=100){return Math.max(r,Math.min(t,e))}e.d(r,{clamp:()=>i})}},r={};function e(i){var a=r[i];if(void 0!==a)return a.exports;var s=r[i]={exports:{}};return t[i](s,s.exports,e),s.exports}e.d=(t,r)=>{for(var i in r)e.o(r,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},e.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{e.r(i),e.d(i,{ColorRGBA:()=>r});var t=e(19);class r{r;g;b;a;constructor(r,e,i,a=1){this.r=(0,t.clamp)(r,0,255),this.g=(0,t.clamp)(e,0,255),this.b=(0,t.clamp)(i,0,255),this.a=(0,t.clamp)(a,0,255)}toString(){return`${this.r}, ${this.g}, ${this.b}, ${this.a}`}toStringWithoutAlpha(){return`${this.r}, ${this.g}, ${this.b}`}asArray({noAlpha:t=!1}={}){return t?[this.r,this.g,this.b]:[this.r,this.g,this.b,this.a]}getCopy(){return new r(this.r,this.g,this.b,this.a)}static increaseSaturation(r,e){e/=100;const i=Math.max(...r.asArray({noAlpha:!0})),a=r.getCopy();return a.r=Math.floor((0,t.clamp)(r.r===i?r.r+r.r*e:r.r-r.r*e,0,255)),a.g=Math.floor((0,t.clamp)(r.g===i?r.g+r.g*e:r.g-r.g*e,0,255)),a.b=Math.floor((0,t.clamp)(r.b===i?r.b+r.b*e:r.b-r.b*e,0,255)),a}static getUnique(t,e=!0){return t.filter(((t,r,e)=>e.findIndex((r=>JSON.stringify(t)===JSON.stringify(r)))===r)).filter((t=>!e||r.isValid(t)&&t.a>0))}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b,yield this.a}equals(t){return this.r===t.r&&this.g===t.g&&this.b===t.b&&this.a===t.a}static isValid(t){return!("number"!=typeof t.r||Number.isNaN(t.r)||"number"!=typeof t.g||Number.isNaN(t.g)||"number"!=typeof t.b||Number.isNaN(t.b)||"number"!=typeof t.a||Number.isNaN(t.a))}static get BLACK(){return new r(0,0,0)}static get NULL(){return new r(0,0,0,0)}}})(),ColorRGBA=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,