var CanvasTools;(()=>{"use strict";var t={173:(t,r,e)=>{e.d(r,{ColorRGBA:()=>o});var a=e(19);class o{r;g;b;a;constructor(t,r,e,o=1){this.r=(0,a.clamp)(t,0,255),this.g=(0,a.clamp)(r,0,255),this.b=(0,a.clamp)(e,0,255),this.a=(0,a.clamp)(o,0,255)}toString(){return`${this.r}, ${this.g}, ${this.b}, ${this.a}`}toStringWithoutAlpha(){return`${this.r}, ${this.g}, ${this.b}`}asArray({noAlpha:t=!1}={}){return t?[this.r,this.g,this.b]:[this.r,this.g,this.b,this.a]}getCopy(){return new o(this.r,this.g,this.b,this.a)}static increaseSaturation(t,r){r/=100;const e=Math.max(...t.asArray({noAlpha:!0})),o=t.getCopy();return o.r=Math.floor((0,a.clamp)(t.r===e?t.r+t.r*r:t.r-t.r*r,0,255)),o.g=Math.floor((0,a.clamp)(t.g===e?t.g+t.g*r:t.g-t.g*r,0,255)),o.b=Math.floor((0,a.clamp)(t.b===e?t.b+t.b*r:t.b-t.b*r,0,255)),o}static getUnique(t,r=!0){return t.filter(((t,r,e)=>e.findIndex((r=>JSON.stringify(t)===JSON.stringify(r)))===r)).filter((t=>!r||o.isValid(t)&&t.a>0))}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b,yield this.a}equals(t){return this.r===t.r&&this.g===t.g&&this.b===t.b&&this.a===t.a}static isValid(t){return!("number"!=typeof t.r||Number.isNaN(t.r)||"number"!=typeof t.g||Number.isNaN(t.g)||"number"!=typeof t.b||Number.isNaN(t.b)||"number"!=typeof t.a||Number.isNaN(t.a))}static get BLACK(){return new o(0,0,0)}static get NULL(){return new o(0,0,0,0)}}},19:(t,r,e)=>{function a(t=0,r=0,e=100){return Math.max(r,Math.min(t,e))}e.d(r,{clamp:()=>a})},676:(t,r,e)=>{var a,o,n,i;e.d(r,{COLOR_CHANNEL:()=>i}),function(t){t[t.PIXEL=0]="PIXEL",t[t.PERCENTAGE=1]="PERCENTAGE"}(a||(a={})),function(t){t[t.HORIZONTAL=0]="HORIZONTAL",t[t.VERTICAL=1]="VERTICAL"}(o||(o={})),function(t){t[t.FROM_TOP=0]="FROM_TOP",t[t.FROM_BOTTOM=1]="FROM_BOTTOM"}(n||(n={})),function(t){t[t.R=0]="R",t[t.G=1]="G",t[t.B=2]="B",t[t.A=3]="A"}(i||(i={}))}},r={};function e(a){var o=r[a];if(void 0!==o)return o.exports;var n=r[a]={exports:{}};return t[a](n,n.exports,e),n.exports}e.d=(t,r)=>{for(var a in r)e.o(r,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:r[a]})},e.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var a={};(()=>{e.r(a),e.d(a,{findBiggestColorRange:()=>s,getColorArrayByContext:()=>i,getColorPalette:()=>u,getColorPaletteByContext:()=>l,getPixelColorFromCanvas:()=>n,getPixelPositionByCanvasWidth:()=>o});var t=e(676),r=e(173);function o(t,r,e=4){return{x:t/e%r,y:Math.floor(Math.floor(t/r)/e)}}function n(t,e){return new r.ColorRGBA(e[t],e[t+1],e[t+2],e[t+3]/255)}function i(t,r=4){const e=t.getImageData(0,0,t.canvas.width,t.canvas.height).data,a=[];for(var o=e.length;o>=0;o-=r)a.push(n(o,e));return a}function s(r){let e=Number.MAX_VALUE,a=Number.MAX_VALUE,o=Number.MAX_VALUE,n=Number.MIN_VALUE,i=Number.MIN_VALUE,s=Number.MIN_VALUE;r.forEach((t=>{e=Math.min(e,t.r),a=Math.min(a,t.g),o=Math.min(o,t.b),n=Math.max(n,t.r),i=Math.max(i,t.g),s=Math.max(s,t.b)}));const l=n-e,u=i-a,h=s-o,g=Math.max(l,u,h);return g===l?t.COLOR_CHANNEL.R:g===u?t.COLOR_CHANNEL.G:t.COLOR_CHANNEL.B}function l(t,r=0){return u(i(t),r)}function u(e,a=0){if(6===a||0===e.length){const t=e.reduce(((t,e)=>r.ColorRGBA.isValid(t)&&r.ColorRGBA.isValid(e)?(r.ColorRGBA.isValid(e)&&(t.r+=e.r,t.g+=e.g,t.b+=e.b,t.a+=e.a),t):r.ColorRGBA.NULL),r.ColorRGBA.NULL);return r.ColorRGBA.NULL.equals(t)?[r.ColorRGBA.NULL]:[new r.ColorRGBA(Math.round(t.r/e.length),Math.round(t.g/e.length),Math.round(t.b/e.length),Math.round(t.a/e.length))]}const o=s(e);e.sort(((r,e)=>{switch(o){case t.COLOR_CHANNEL.R:return r.r-e.r;case t.COLOR_CHANNEL.G:return r.g-e.g;case t.COLOR_CHANNEL.B:return r.b-e.b;default:return r.r-e.r}}));const n=e.length/2;return r.ColorRGBA.getUnique([...u(e.slice(0,n),a+1),...u(e.slice(n+1),a+1)].filter((t=>!t.equals(r.ColorRGBA.NULL))))}})(),CanvasTools=a})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,