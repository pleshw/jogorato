var ConcatenateScene;(()=>{"use strict";var e={631:()=>{HTMLElement.prototype.removeAllChildren=function(){for(;this.hasChildNodes();)this.firstChild&&this.removeChild(this.firstChild)},HTMLElement.prototype.makeCover=function(){this.style.display="flex",this.style.width="100%",this.style.height="100%",this.style.position="absolute",this.style.top="0",this.style.left="0"}},28:(e,t,n)=>{n.d(t,{debounceFactory:()=>r,isMobileBrowser:()=>i});const s=new Map;function i(){return/Android|iPhone/i.test(navigator.userAgent)}function r(e,t){let n;return function(){const s=window,i=arguments;clearTimeout(n),n=window.setTimeout((()=>e.apply(s,i)),t)}}new Map,window.addEventListener("keydown",(e=>{for(const t of s)e.code===t[0]&&t[1].forEach((t=>t(e)))}))},930:(e,t,n)=>{n.d(t,{Layer:()=>s}),n(631),n(936);class s{element;priority;backgroundStyle;backgroundImage;filter;classList;cursor;onClick;onMouseOver;onMouseDown;onMouseUp;constructor({priority:e,backgroundStyle:t,backgroundImage:n,filter:i,cursor:r,onClick:o,onMouseOver:l,onMouseDown:a,onMouseUp:c,classList:h}){this.priority=e,this.filter=i,this.backgroundStyle=t,this.backgroundImage=n,this.cursor=r,this.classList=h,this.onClick=o,this.onMouseOver=l,this.onMouseDown=a,this.onMouseUp=c,this.element=s.getLayerElement(this,this.priority,this.classList,this.backgroundStyle,this.backgroundImage,this.filter,this.cursor,this.onClick,this.onMouseOver,this.onMouseDown,this.onMouseUp)}setParent(e){if(e.insertAdjacentElement("beforeend",this.element),this.element.parentElement&&this.element.parentElement.id){const e=this.element.parentElement.id,t=this.element.parentElement.getElementsByClassName("layer").length-1;this.element.id=`layer${t}${e.capitalizeFirstLetter()}`}}setAsMainLayer(e){if(e.insertAdjacentElement("beforeend",this.element),this.element.parentElement&&this.element.parentElement.id){const e=this.element.parentElement.id;this.element.id=`mainLayer${e.capitalizeFirstLetter()}`}}static getLayerElement(e,t,n,s,i,r,o,l,a,c,h){const m=document.createElement("div");return m.classList.add(...n||[]),m.classList.add("layer"),m.makeCover(),m.style.zIndex=t>0?t.toString():"0",s&&(m.style.background=s),r&&(m.style.filter=r),o&&(m.style.cursor=o),l&&m.addEventListener("click",(()=>{l(e)})),a&&m.addEventListener("mouseover",(()=>{a(e)})),c&&m.addEventListener("mousedown",(()=>{c(e)})),h&&m.addEventListener("mouseup",(()=>{h(e)})),i&&this.setLayerBackgroundImage(m,i),m}static setLayerBackgroundImage(e,t){const n=document.createElement("img");n.src=t,n.style.userSelect="none",n.style.maxWidth="100%",n.style.height="auto",n.makeCover(),e.insertAdjacentElement("afterbegin",n)}}},19:(e,t,n)=>{function s(e=0,t=0,n=100){return Math.max(t,Math.min(e,n))}n.d(t,{clamp:()=>s})},931:(e,t,n)=>{n.d(t,{Scene:()=>i});var s=n(930);class i{container;element;layers;components;mainLayer;mainLayerConfig;constructor({container:e,layers:t,components:n,mainLayerConfig:s}){this.container=e,this.mainLayerConfig=s,this.layers=t,this.components=n||[],this.element=document.createElement("div"),this.components.forEach((e=>this.element.insertAdjacentElement("beforeend",e.container)))}async build(){this.container.classList.add("scene-container"),this.element.classList.add("scene"),this.setupLayers(),this.setElementStyle(),this.container.insertAdjacentElement("beforeend",this.element),this.components.forEach((async e=>await e.build(this)))}getMainLayer(){}get sceneCounter(){return this.container.querySelectorAll(`#${this.container.id} > .scene`).length}setupLayers(){this.container.id?this.element.id=`${this.container.id}${this.sceneCounter}`:(this.container.id=`sceneContainer${this.container.getElementsByClassName("scene-container").length}`,this.element.id=`scene${this.sceneCounter}`),this.layers.forEach((e=>{e.setParent(this.element)})),this.mainLayerConfig?(this.mainLayer=new s.Layer({...this.mainLayerConfig,priority:999}),this.mainLayer.setAsMainLayer(this.element)):(this.mainLayer=new s.Layer({priority:999}),this.mainLayer.setAsMainLayer(this.element))}setElementStyle(){this.container.style.position="relative",this.container.style.flexWrap="wrap",this.element.style.position="relative",this.element.style.display="flex",this.element.style.width="100vw",this.element.style.height="100vh",this.element.style.left="0",this.element.style.top="0",this.element.style.overflow="hidden"}}},936:()=>{String.prototype.isNullOrEmpty=function(){return"string"!=typeof this&&!this&&""!==this},String.prototype.truncate=function(e,t="..."){return(this.length>e?this.substring(0,e)+t:this).toString()},String.prototype.removeAccents=function(){return this.normalize("NFD").replace(/[\u0300-\u036f]/g,"")},String.prototype.capitalizeFirstLetter=function(){return"string"!=typeof this?"":this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.zeroBefore=function(){return this.padStart(2,"0")}},676:(e,t,n)=>{var s,i,r,o;n.d(t,{DIRECTION_REFERENCE:()=>i}),function(e){e[e.PIXEL=0]="PIXEL",e[e.PERCENTAGE=1]="PERCENTAGE"}(s||(s={})),function(e){e[e.HORIZONTAL=0]="HORIZONTAL",e[e.VERTICAL=1]="VERTICAL"}(i||(i={})),function(e){e[e.FROM_TOP=0]="FROM_TOP",e[e.FROM_BOTTOM=1]="FROM_BOTTOM"}(r||(r={})),function(e){e[e.R=0]="R",e[e.G=1]="G",e[e.B=2]="B",e[e.A=3]="A"}(o||(o={}))}},t={};function n(s){var i=t[s];if(void 0!==i)return i.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};(()=>{n.r(s),n.d(s,{ConcatenateScene:()=>o});var e=n(28),t=n(19),i=n(931),r=n(676);class o extends i.Scene{scenes=[];index=0;currentSceneClassName="show";direction;constructor(e){super({container:e.container,layers:[],components:e.components||[]}),this.direction=e.direction}async build(){await super.build(),this.container.classList.add("scene-container","concatenate-scene"),this.element.style.flexWrap="wrap",this.setupElement(),this.setupScenes(),this.scenes.forEach((async e=>await e.build()))}push(e){e&&(Array.isArray(e)||(e=[e]),e.forEach(((e,t)=>{this.scenes.push(e),0===t&&this.scenes[0].element.classList.add(this.currentSceneClassName)})))}pushSceneByConfig(e){e&&(Array.isArray(e)||(e=[e]),e.forEach(((e,t)=>{this.scenes.push(new i.Scene({...e,container:this.element})),0===t&&this.scenes[0].element.classList.add(this.currentSceneClassName)})))}get length(){return this.scenes.length}isFirstScene(){return 0===this.index}isLastScene(){return this.index===this.length-1}prev(){this.goTo(this.index-1)}next(){this.goTo(this.index+1)}goTo(e){this.setCurrentSceneByIndex(e),this.direction===r.DIRECTION_REFERENCE.HORIZONTAL?this.element.scrollTo({top:0,left:window.innerWidth*e,behavior:"smooth"}):this.element.scrollTo({top:window.innerHeight*e,left:0,behavior:"smooth"})}setCurrentSceneByIndex(e){e=(0,t.clamp)(e,0,this.scenes.length-1),Array.from(this.element.getElementsByClassName(this.currentSceneClassName)).forEach((e=>{e.classList.remove(this.currentSceneClassName)})),this.scenes[e].element.classList.add(this.currentSceneClassName),this.index=e}setupScenes(){this.scenes.forEach((e=>{e.element.style.flex="none",e.element.style.scrollSnapAlign="center"}))}setupElement(){this.element.style.scrollBehavior="smooth",this.element.style.display="flex",this.direction===r.DIRECTION_REFERENCE.HORIZONTAL?this.setupElementHorizontal():this.setupElementVertical(),this.element.style.flexWrap="nowrap",this.element.style.scrollSnapAlign="center",this.element.style.justifyContent="baseline",this.element.style.alignItems="center"}setupElementHorizontal(){this.element.style.flexDirection="column",this.element.style.scrollSnapType="x mandatory";const t=(0,e.debounceFactory)((()=>{this.setCurrentSceneByIndex(Math.round(this.element.scrollLeft/window.innerWidth))}),500);this.element.addEventListener("scroll",(()=>{t()})),(0,e.isMobileBrowser)()?(this.element.style.overflowX="auto",this.element.style.overflowY="hidden"):(this.element.style.overflowX="hidden",this.element.style.overflowY="hidden")}setupElementVertical(){this.element.style.flexDirection="row",this.element.style.scrollSnapType="y mandatory";const t=(0,e.debounceFactory)((()=>{this.setCurrentSceneByIndex(Math.round(this.element.scrollTop/window.innerHeight))}),500);this.element.addEventListener("scroll",(()=>{t()})),(0,e.isMobileBrowser)()?(this.element.style.overflowX="hidden",this.element.style.overflowY="auto"):(this.element.style.overflowX="hidden",this.element.style.overflowY="hidden")}}})(),ConcatenateScene=s})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,