var PinCollisionEvent;(()=>{"use strict";var n={28:(n,t,e)=>{e.d(t,{getTransformCoordsFromElement:()=>s});var i=e(19);const o=new Map;function s(n){const t=(window.getComputedStyle(n).transform.match(i.regexNumberPattern)??[0,0]).map((n=>+n));return{x:void 0!==t[4]?Math.round(t[4]):0,y:void 0!==t[5]?Math.round(t[5]):0}}new Map,window.addEventListener("keydown",(n=>{for(const t of o)n.code===t[0]&&t[1].forEach((t=>t(n)))}))},513:(n,t,e)=>{e.d(t,{getElementsInteractingSet:()=>a,isValidTargetToTriggerEvent:()=>r,mapTargetsCollidingByTriggerElement:()=>o}),e(28);var i=e(676);new Map;const o=new Map,s=new Map;function r(n,t,e){return!!n.classList.contains(t)&&(!e||!new i.CollisionBorderDistanceExtras(e.distanceFromBorder).anyLowerThan(e.distanceThreshold))}function a(n){return s.has(n)||s.set(n,new Set),s.get(n)}new Map},19:(n,t,e)=>{e.d(t,{regexNumberPattern:()=>i});const i=/-?\d+\.?\d*/g},676:(n,t,e)=>{var i,o,s,r;e.d(t,{CollisionBorderDistanceExtras:()=>a}),function(n){n[n.PIXEL=0]="PIXEL",n[n.PERCENTAGE=1]="PERCENTAGE"}(i||(i={})),function(n){n[n.HORIZONTAL=0]="HORIZONTAL",n[n.VERTICAL=1]="VERTICAL"}(o||(o={})),function(n){n[n.FROM_TOP=0]="FROM_TOP",n[n.FROM_BOTTOM=1]="FROM_BOTTOM"}(s||(s={})),function(n){n[n.R=0]="R",n[n.G=1]="G",n[n.B=2]="B",n[n.A=3]="A"}(r||(r={}));class a{collisionBorderDistances;constructor(n){this.collisionBorderDistances=n}anyGreaterThan(n){return this.collisionBorderDistances.top>n||this.collisionBorderDistances.right>n||this.collisionBorderDistances.bottom>n||this.collisionBorderDistances.left>n}anyLowerThan(n){return this.collisionBorderDistances.top<n||this.collisionBorderDistances.right<n||this.collisionBorderDistances.bottom<n||this.collisionBorderDistances.left<n}anyEquals(n){return this.collisionBorderDistances.top===n||this.collisionBorderDistances.right===n||this.collisionBorderDistances.bottom===n||this.collisionBorderDistances.left===n}}}},t={};function e(i){var o=t[i];if(void 0!==o)return o.exports;var s=t[i]={exports:{}};return n[i](s,s.exports,e),s.exports}e.d=(n,t)=>{for(var i in t)e.o(t,i)&&!e.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:t[i]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var i={};(()=>{e.r(i),e.d(i,{PinCollisionEvent:()=>o,pinDraggableByFormula:()=>s,pinDraggableOnCenter:()=>r});var n=e(28),t=e(513);class o{onPin;onUnpin;pinPositionFormula;targetClass="pin-target";autoInsertTargetClass=!0;constructor({pinPositionFormula:n,onPin:t,onUnpin:e}){this.pinPositionFormula=n||void 0,this.onPin=t||void 0,this.onUnpin=e||void 0}async onColliding(n,e,i,o){if(!(0,t.isValidTargetToTriggerEvent)(e,this.targetClass))return;const a=(0,t.getElementsInteractingSet)(e),l="total-pinned-elements";if(n.classList.contains("dragging"))return n.classList.remove("pinned"),n.classList.add("ready-to-pin"),void(a.delete(n)&&(this.onElementInteractionChange(e,a,l),!this.onUnpin||this.onUnpin(n,e)));this.pinPositionFormula?s(n,e,o,this.pinPositionFormula):r(n,e,o),a.has(n)||(a.add(n),!this.onPin||this.onPin(n,e)),n.classList.add("pinned"),n.classList.remove("ready-to-pin"),this.onElementInteractionChange(e,a,l)}async onNotColliding(n,e){const i=(0,t.getElementsInteractingSet)(e);i.delete(n),i.size>0?e.classList.add("has-pinned-elements"):e.classList.remove("has-pinned-elements"),t.mapTargetsCollidingByTriggerElement.has(n)||t.mapTargetsCollidingByTriggerElement.set(n,new Set);const o=t.mapTargetsCollidingByTriggerElement.get(n);o.delete(e)&&0===o.size&&n.classList.remove("pinned","ready-to-pin")}onElementInteractionChange(n,t,e){t.size>0?n.classList.add("has-pinned-elements"):n.classList.remove("has-pinned-elements"),n.setAttribute(e,t.size.toString())}}function s(t,e,i,o){const s=e.getBoundingClientRect(),r=o(t.getBoundingClientRect(),s,(0,n.getTransformCoordsFromElement)(t),i);t.style.transform=`translate(${r.x}px, ${r.y}px)`}function r(t,e,i){const o=e.getBoundingClientRect(),s=(0,n.getTransformCoordsFromElement)(t),r=s.x+i.right,a=s.y+i.bottom;t.style.transform=`translate(${Math.round(r-o.width/2)}px, ${Math.round(a-o.height/2)}px)`}})(),PinCollisionEvent=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,