var Pagination;(()=>{"use strict";var t={589:()=>{function t(t=0,e=0,n=100){return Math.max(e,Math.min(t,n))}Array.prototype.joinAsString=function(){return this.reduce(((t,e)=>t?`${t}, ${e}`:`${e}`),"")},Array.prototype.getTotal=function(){return this.reduce(((t,e)=>t?t+e:e),0)},Array.prototype.truncate=function(e,n,i,r){if(this.length<=n)return this;const s=!(!r||void 0===r.truncateLeft||r.truncateLeft),a=r&&r.truncateLeftStart&&e<r.truncateLeftStart,o=t(s||a?0:e-n/2,0,e-1),h=this.slice(o,e),c=[];o>(n%2==0?0:1)&&i&&c.push(this[0],i);const u=!(!r||void 0===r.truncateRight||r.truncateRight),l=r&&r.truncateRightStart&&e<r.truncateRightStart,g=t(u||l?this.length:e+1+n/2,e,this.length),p=this.slice(e,g);let d=[this[this.length-1]];return g<this.length&&i&&d.unshift(i),this.length-g==1?d.shift():this.length-g==0&&(d=[]),[...c,...h,...p,...d]}},631:()=>{HTMLElement.prototype.removeAllChildren=function(){for(;this.hasChildNodes();)this.firstChild&&this.removeChild(this.firstChild)},HTMLElement.prototype.makeCover=function(){this.style.display="flex",this.style.width="100%",this.style.height="100%",this.style.position="absolute",this.style.top="0",this.style.left="0"}},19:(t,e,n)=>{function i(t=0,e=0,n=100){return Math.max(e,Math.min(t,n))}n.d(e,{clamp:()=>i})},858:(t,e,n)=>{n.d(e,{PaginationRender:()=>i});class i{_paginationManager;_containerElement;_listElement;_footerElement;_listItemTemplate;_emptyListTemplate;_headerOptions;_containerOptions;_footerOptions;_listContainerTag;constructor(t,e){this._paginationManager=t,[this._headerOptions,this._containerOptions,this._footerOptions]=[e?.headerOptions,e?.containerOptions,e?.footerOptions],this._listItemTemplate=e.setup.listItemTemplate,this._emptyListTemplate=e.setup.emptyListTemplate,this._listContainerTag=e.setup.listContainerTag||"ul",this._containerElement=document.querySelector(e.setup.containerQuerySelector)||document.createElement("div"),this._footerElement=this.renderFooter(),this._containerElement.insertAdjacentElement("beforeend",this._footerElement),this._listElement=this.renderListElement(),this._containerElement.insertAdjacentElement("afterbegin",this._listElement),this._containerOptions?.classList&&this._containerElement.classList.add(...this._containerOptions.classList.split(" "))}getButtonId(t){return`btnPagination${this._containerElement.id.capitalizeFirstLetter()}${t+1}`}getItemListId(){return`listPagination${this._containerElement.id.capitalizeFirstLetter()}`}getFooterId(){return`footerPagination${this._containerElement.id.capitalizeFirstLetter()}`}renderListElement(){if(document.getElementById(this.getItemListId()))return document.getElementById(this.getItemListId());const t=document.createElement(this._listContainerTag);return t.id=this.getItemListId(),t}resetFooter(){this._footerElement=this.renderFooter(),this._paginationManager.sourceString&&this._footerElement.insertAdjacentHTML("beforeend",`\n        <div class="contador-footer-fetch">\n          <span>Página: ${this._paginationManager.index+1}</span>\n          <span>Nº de Resultados: ${this._paginationManager.currentPageData?this._paginationManager.currentPageData.length:0}</span>\n        </div>`),this._containerElement.insertAdjacentElement("beforeend",this._footerElement)}async tryRenderCurrentPageList(){let t;return t=this._paginationManager.sourceString?await this._paginationManager.fetchCurrentPage():this._paginationManager.sourceArray.slice(this._paginationManager.index*this._paginationManager.amountPerPage,(this._paginationManager.index+1)*this._paginationManager.amountPerPage),!t||t.length<1?(this._listElement.insertAdjacentElement("beforeend",this._emptyListTemplate()),!1):(this._listElement.removeAllChildren(),t.forEach((t=>{const e=this._listItemTemplate(t);e.classList.add("pagination-list-item"),this._listElement.insertAdjacentElement("beforeend",e)})),this._paginationManager.currentPageData=t,!0)}renderFooter(){(this._footerElement||document.getElementById(this.getFooterId()))&&document.getElementById(this.getFooterId())?.remove();const t=document.createElement("div");t.id=this.getFooterId();const e=document.createElement("button"),n=document.createElement("button");return e.setAttribute("type","button"),n.setAttribute("type","button"),[e.innerText,n.innerText]=[this._footerOptions?.prevButtonText||"Previous",this._footerOptions?.nextButtonText||"Next"],e.classList.add("btn-pagination","btn-pagination-prev"),n.classList.add("btn-pagination","btn-pagination-next"),[e.onclick,n.onclick]=[()=>this._paginationManager.previous(),()=>this._paginationManager.next()],t.insertAdjacentElement("beforeend",e),this.makeFooterButtonList(t),t.insertAdjacentElement("beforeend",n),t}makeFooterButtonList(t){const e=document.createElement("div");e.classList.add("btn-pagination-inner-list"),t.insertAdjacentElement("beforeend",e),this._footerOptions?.truncateLength&&this._footerOptions?.truncateLength>0?[...Array(this._paginationManager.numPages).keys()].truncate(this._paginationManager.index,this._footerOptions.truncateLength,-1,this._footerOptions.truncateOptions).forEach((t=>e.insertAdjacentElement("beforeend",this.makeFooterButton(t)))):[...Array(this._paginationManager.numPages).keys()].forEach((t=>e.insertAdjacentElement("beforeend",this.makeFooterButton(t))))}makeFooterButton(t){const e=document.createElement("button");return e.id=this.getButtonId(t),e.classList.add("btn-pagination"),e.setAttribute("type","button"),t===this._paginationManager.index&&e.classList.add("active"),this._footerOptions?.buttonClassList&&e.classList.add(...this._footerOptions.buttonClassList.split(" ")),this._footerOptions?.truncateLength&&this._footerOptions?.truncateLength>0&&-1===t?e.classList.add("btn-pagination-decorator"):e.onclick=()=>this._paginationManager.peek(t),this._footerOptions?.buttonTextFormula?e.innerText=this._footerOptions.buttonTextFormula(t):e.innerText=-1!==t?`${t+1}`:this._footerOptions?.truncateDecorator||"...",e}}},936:()=>{String.prototype.isNullOrEmpty=function(){return"string"!=typeof this&&!this&&""!==this},String.prototype.truncate=function(t,e="..."){return(this.length>t?this.substring(0,t)+e:this).toString()},String.prototype.removeAccents=function(){return this.normalize("NFD").replace(/[\u0300-\u036f]/g,"")},String.prototype.capitalizeFirstLetter=function(){return"string"!=typeof this?"":this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.zeroBefore=function(){return this.padStart(2,"0")}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var s=e[i]={exports:{}};return t[i](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{n.r(i),n.d(i,{Pagination:()=>r}),n(936),n(631),n(589);var t=n(19),e=n(858);class r{_index;_numPages;_currentPageData;_amountPerPage;_sourceArray;_sourceString;_pathToList;_pathToTotalResults;_onPageChange;_onFetchStart;_onFetchCompleted;_elementRender;_searchOptions;constructor(t){this._index=t.setup.currentPage-1,this._pathToList=t.setup.objectPathToList,this._pathToTotalResults=t.setup.objectPathToTotalResults,this._onPageChange=t.setup.onPageChange||(()=>{}),this._onFetchStart=t.setup.onFetchStart||(()=>{}),this._onFetchCompleted=t.setup.onFetchCompleted||(()=>{}),this._sourceString=r.isSourceString(t.setup.source)?t.setup.source:"",this._sourceArray=r.isSourceArray(t.setup.source)?t.setup.source:[],this._amountPerPage=t.setup.amountPerPage,this._numPages=this._amountPerPage>0?Math.ceil(this._sourceArray.length/this._amountPerPage):1,this._searchOptions=t?.searchOptions,this._elementRender=new e.PaginationRender(this,t),this.peek(this._index)}set currentPageData(t){this._currentPageData=t}get currentPageData(){return this._currentPageData}get sourceArray(){return this._sourceArray}get sourceString(){return this._sourceString}get index(){return this._index}get numPages(){return this._numPages}get amountPerPage(){return this._amountPerPage}async next(){await this.peek(this._index+1)}async previous(){await this.peek(this._index-1)}async peek(e){const n=this._index>0?this._index:0;e=t.clamp(e,0,e),this._index=this._sourceString?e:t.clamp(e,0,this._numPages-1),this._sourceString&&!await this._elementRender.tryRenderCurrentPageList()?this._index=n:this._sourceArray&&await this._elementRender.tryRenderCurrentPageList(),this._onPageChange(this._index),document.querySelectorAll(".btn-pagination.active").forEach((t=>t.classList.remove("active"))),document.getElementById(this._elementRender.getButtonId(this._index))?.classList.add("active"),this._elementRender.resetFooter()}async fetchCurrentPage(){if(!this._sourceString)return new Array;this._onFetchStart();let t=await fetch(this._sourceString,{method:this._searchOptions?.method||"POST",headers:this._searchOptions?.headers||{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({...this._searchOptions?.parameters,...this.getSearchArguments()})}).then((t=>t.json())),e=-1;if(this._pathToTotalResults){const n=this._pathToTotalResults.split(".");let i=t;n.forEach((t=>i="string"==typeof i[t]?JSON.parse(i[t]):i[t])),"number"==typeof i&&(e=i,this._numPages=this._amountPerPage>0?Math.ceil(e/this._amountPerPage):1,this._elementRender.resetFooter())}return this._pathToList?(this._pathToList.split(".").forEach((e=>t="string"==typeof t[e]?JSON.parse(t[e]):t[e])),this._onFetchCompleted(t,e),t):(this._onFetchCompleted&&this._onFetchCompleted(t,e),t)}getSearchArguments(){return{page:this._index+1,amount:this._amountPerPage}}static isSourceString(t){return"string"==typeof t}static isSourceArray(t){return!r.isSourceString(t)}}})(),Pagination=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,