var ShareAttributeCollisionEvent;(()=>{"use strict";var t={28:(t,e,r)=>{r.d(e,{getDefaultAttributeForTarget:()=>n});const i=new Map,s=new Map;function n(t,e){s.has(t)||s.set(t,new Map);let r="";const i=s.get(t);return r=(i.has(e)?i.get(e):t.getAttribute(e))||"",function(t,e,r){s.has(t)||s.set(t,new Map),s.get(t).set(e,r)}(t,e,r),r}window.addEventListener("keydown",(t=>{for(const e of i)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},513:(t,e,r)=>{r.d(e,{getElementsInteractingSet:()=>o,isValidTargetToTriggerEvent:()=>a,mapTargetsCollidingByTriggerElement:()=>s}),r(28);var i=r(676);new Map;const s=new Map,n=new Map;function a(t,e,r){return!!t.classList.contains(e)&&(!r||!new i.CollisionBorderDistanceExtras(r.distanceFromBorder).anyLowerThan(r.distanceThreshold))}function o(t){return n.has(t)||n.set(t,new Set),n.get(t)}new Map},676:(t,e,r)=>{var i,s,n,a;r.d(e,{CollisionBorderDistanceExtras:()=>o}),function(t){t[t.PIXEL=0]="PIXEL",t[t.PERCENTAGE=1]="PERCENTAGE"}(i||(i={})),function(t){t[t.HORIZONTAL=0]="HORIZONTAL",t[t.VERTICAL=1]="VERTICAL"}(s||(s={})),function(t){t[t.FROM_TOP=0]="FROM_TOP",t[t.FROM_BOTTOM=1]="FROM_BOTTOM"}(n||(n={})),function(t){t[t.R=0]="R",t[t.G=1]="G",t[t.B=2]="B",t[t.A=3]="A"}(a||(a={}));class o{collisionBorderDistances;constructor(t){this.collisionBorderDistances=t}anyGreaterThan(t){return this.collisionBorderDistances.top>t||this.collisionBorderDistances.right>t||this.collisionBorderDistances.bottom>t||this.collisionBorderDistances.left>t}anyLowerThan(t){return this.collisionBorderDistances.top<t||this.collisionBorderDistances.right<t||this.collisionBorderDistances.bottom<t||this.collisionBorderDistances.left<t}anyEquals(t){return this.collisionBorderDistances.top===t||this.collisionBorderDistances.right===t||this.collisionBorderDistances.bottom===t||this.collisionBorderDistances.left===t}}}},e={};function r(i){var s=e[i];if(void 0!==s)return s.exports;var n=e[i]={exports:{}};return t[i](n,n.exports,r),n.exports}r.d=(t,e)=>{for(var i in e)r.o(e,i)&&!r.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{r.r(i),r.d(i,{ShareAttributeCollisionEvent:()=>n});var t=r(28),e=r(513);const s={keepAttribute:!1};class n{keepAttribute;targetClass="attribute-target";autoInsertTargetClass=!0;constructor(t=s){this.keepAttribute=t.keepAttribute||!1}async onColliding(t,r,i,s){const n=t.getAttribute("shared-attribute-name"),a=t.getAttribute("shared-attribute-value");if(!a||!n||!(0,e.isValidTargetToTriggerEvent)(r,this.targetClass))return;const o=(0,e.getElementsInteractingSet)(r),l="total-sharing-attributes";t.classList.contains("dragging")?(t.classList.remove("sharing-attribute"),t.classList.add("ready-to-share-attribute"),this.handleElementInteractionShareAttribute(t,r,o,l)):(t.classList.add("sharing-attribute"),t.classList.remove("ready-to-share-attribute"),r.setAttribute(n,a),o.add(t),this.handleElementInteractionShareAttribute(t,r,o,l))}async onNotColliding(t,r){(0,e.getElementsInteractingSet)(r).size>0?r.classList.add("sharing-attribute"):this.onSharedAttributeEmpty(t,r),e.mapTargetsCollidingByTriggerElement.has(t)||e.mapTargetsCollidingByTriggerElement.set(t,new Set);const i=e.mapTargetsCollidingByTriggerElement.get(t);(i.delete(r)||0===i.size)&&t.classList.remove("sharing-attribute","ready-to-share-attribute")}handleElementInteractionShareAttribute(t,e,r,i){r.size>0?e.classList.add("sharing-attribute"):this.onSharedAttributeEmpty(t,e),e.setAttribute(i,r.size.toString())}onSharedAttributeEmpty(e,r){r.classList.remove("sharing-attribute");const i=e.getAttribute("shared-attribute-name");if(i){const e=(0,t.getDefaultAttributeForTarget)(r,i);e?r.setAttribute(i,e):this.keepAttribute||r.removeAttribute(i)}}}})(),ShareAttributeCollisionEvent=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,