var PercentBarComponent;(()=>{"use strict";var t={589:()=>{function t(t=0,n=0,e=100){return Math.max(n,Math.min(t,e))}Array.prototype.joinAsString=function(){return this.reduce(((t,n)=>t?`${t}, ${n}`:`${n}`),"")},Array.prototype.getTotal=function(){return this.reduce(((t,n)=>t?t+n:n),0)},Array.prototype.truncate=function(n,e,r,a){if(this.length<=e)return this;const i=!(!a||void 0===a.truncateLeft||a.truncateLeft),o=a&&a.truncateLeftStart&&n<a.truncateLeftStart,u=t(i||o?0:n-e/2,0,n-1),s=this.slice(u,n),c=[];u>(e%2==0?0:1)&&r&&c.push(this[0],r);const l=!(!a||void 0===a.truncateRight||a.truncateRight),f=a&&a.truncateRightStart&&n<a.truncateRightStart,d=t(l||f?this.length:n+1+e/2,n,this.length),h=this.slice(n,d);let p=[this[this.length-1]];return d<this.length&&r&&p.unshift(r),this.length-d==1?p.shift():this.length-d==0&&(p=[]),[...c,...s,...h,...p]}},813:(t,n,e)=>{e.d(n,{Component:()=>a});var r=e(676);class a{position;container;fadeInAnimation;fadeOutAnimation;constructor(t,n,e,r){this.container=t,this.fadeInAnimation=e,this.fadeOutAnimation=r,n&&this.setupPosition(n)}async build(t){t&&t.mainLayer&&t.mainLayer.element.insertAdjacentElement("beforeend",this.container),this.container.style.display="flex",this.fadeInAnimation&&await this.fadeInAnimation.animate(this)}setupPosition(t){this.position=t,this.container.style.position="absolute",this.container.style.display="none",this.container.style.left=t.horizontal,t.verticalReference===r.VERTICAL_REFERENCE.FROM_TOP?this.container.style.top=t.vertical:this.container.style.bottom=t.vertical}async destroy(){this.fadeOutAnimation&&await this.fadeOutAnimation.animate(this),this.container.style.display="none"}}},676:(t,n,e)=>{var r,a,i,o;e.d(n,{VERTICAL_REFERENCE:()=>i}),function(t){t[t.PIXEL=0]="PIXEL",t[t.PERCENTAGE=1]="PERCENTAGE"}(r||(r={})),function(t){t[t.HORIZONTAL=0]="HORIZONTAL",t[t.VERTICAL=1]="VERTICAL"}(a||(a={})),function(t){t[t.FROM_TOP=0]="FROM_TOP",t[t.FROM_BOTTOM=1]="FROM_BOTTOM"}(i||(i={})),function(t){t[t.R=0]="R",t[t.G=1]="G",t[t.B=2]="B",t[t.A=3]="A"}(o||(o={}))}},n={};function e(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={exports:{}};return t[r](i,i.exports,e),i.exports}e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};(()=>{e.r(r),e.d(r,{PercentBarComponent:()=>at}),e(589);var t={update:null,begin:null,loopBegin:null,changeBegin:null,change:null,changeComplete:null,loopComplete:null,complete:null,loop:1,direction:"normal",autoplay:!0,timelineOffset:0},n={duration:1e3,delay:0,endDelay:0,easing:"easeOutElastic(1, .5)",round:0},a=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY","perspective","matrix","matrix3d"],i={CSS:{},springs:{}};function o(t,n,e){return Math.min(Math.max(t,n),e)}function u(t,n){return t.indexOf(n)>-1}function s(t,n){return t.apply(null,n)}var c={arr:function(t){return Array.isArray(t)},obj:function(t){return u(Object.prototype.toString.call(t),"Object")},pth:function(t){return c.obj(t)&&t.hasOwnProperty("totalLength")},svg:function(t){return t instanceof SVGElement},inp:function(t){return t instanceof HTMLInputElement},dom:function(t){return t.nodeType||c.svg(t)},str:function(t){return"string"==typeof t},fnc:function(t){return"function"==typeof t},und:function(t){return void 0===t},nil:function(t){return c.und(t)||null===t},hex:function(t){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t)},rgb:function(t){return/^rgb/.test(t)},hsl:function(t){return/^hsl/.test(t)},col:function(t){return c.hex(t)||c.rgb(t)||c.hsl(t)},key:function(e){return!t.hasOwnProperty(e)&&!n.hasOwnProperty(e)&&"targets"!==e&&"keyframes"!==e}};function l(t){var n=/\(([^)]+)\)/.exec(t);return n?n[1].split(",").map((function(t){return parseFloat(t)})):[]}function f(t,n){var e=l(t),r=o(c.und(e[0])?1:e[0],.1,100),a=o(c.und(e[1])?100:e[1],.1,100),u=o(c.und(e[2])?10:e[2],.1,100),s=o(c.und(e[3])?0:e[3],.1,100),f=Math.sqrt(a/r),d=u/(2*Math.sqrt(a*r)),h=d<1?f*Math.sqrt(1-d*d):0,p=d<1?(d*f-s)/h:-s+f;function m(t){var e=n?n*t/1e3:t;return e=d<1?Math.exp(-e*d*f)*(1*Math.cos(h*e)+p*Math.sin(h*e)):(1+p*e)*Math.exp(-e*f),0===t||1===t?t:1-e}return n?m:function(){var n=i.springs[t];if(n)return n;for(var e=1/6,r=0,a=0;;)if(1===m(r+=e)){if(++a>=16)break}else a=0;var o=r*e*1e3;return i.springs[t]=o,o}}function d(t){return void 0===t&&(t=10),function(n){return Math.ceil(o(n,1e-6,1)*t)*(1/t)}}var h,p,m=function(){var t=.1;function n(t,n){return 1-3*n+3*t}function e(t,n){return 3*n-6*t}function r(t){return 3*t}function a(t,a,i){return((n(a,i)*t+e(a,i))*t+r(a))*t}function i(t,a,i){return 3*n(a,i)*t*t+2*e(a,i)*t+r(a)}return function(n,e,r,o){if(0<=n&&n<=1&&0<=r&&r<=1){var u=new Float32Array(11);if(n!==e||r!==o)for(var s=0;s<11;++s)u[s]=a(s*t,n,r);return function(s){return n===e&&r===o||0===s||1===s?s:a(function(e){for(var o=0,s=1;10!==s&&u[s]<=e;++s)o+=t;--s;var c=o+(e-u[s])/(u[s+1]-u[s])*t,l=i(c,n,r);return l>=.001?function(t,n,e,r){for(var o=0;o<4;++o){var u=i(n,e,r);if(0===u)return n;n-=(a(n,e,r)-t)/u}return n}(e,c,n,r):0===l?c:function(t,n,e,r,i){var o,u,s=0;do{(o=a(u=n+(e-n)/2,r,i)-t)>0?e=u:n=u}while(Math.abs(o)>1e-7&&++s<10);return u}(e,o,o+t,n,r)}(s),e,o)}}}}(),v=(h={linear:function(){return function(t){return t}}},p={Sine:function(){return function(t){return 1-Math.cos(t*Math.PI/2)}},Circ:function(){return function(t){return 1-Math.sqrt(1-t*t)}},Back:function(){return function(t){return t*t*(3*t-2)}},Bounce:function(){return function(t){for(var n,e=4;t<((n=Math.pow(2,--e))-1)/11;);return 1/Math.pow(4,3-e)-7.5625*Math.pow((3*n-2)/22-t,2)}},Elastic:function(t,n){void 0===t&&(t=1),void 0===n&&(n=.5);var e=o(t,1,10),r=o(n,.1,2);return function(t){return 0===t||1===t?t:-e*Math.pow(2,10*(t-1))*Math.sin((t-1-r/(2*Math.PI)*Math.asin(1/e))*(2*Math.PI)/r)}}},["Quad","Cubic","Quart","Quint","Expo"].forEach((function(t,n){p[t]=function(){return function(t){return Math.pow(t,n+2)}}})),Object.keys(p).forEach((function(t){var n=p[t];h["easeIn"+t]=n,h["easeOut"+t]=function(t,e){return function(r){return 1-n(t,e)(1-r)}},h["easeInOut"+t]=function(t,e){return function(r){return r<.5?n(t,e)(2*r)/2:1-n(t,e)(-2*r+2)/2}},h["easeOutIn"+t]=function(t,e){return function(r){return r<.5?(1-n(t,e)(1-2*r))/2:(n(t,e)(2*r-1)+1)/2}}})),h);function g(t,n){if(c.fnc(t))return t;var e=t.split("(")[0],r=v[e],a=l(t);switch(e){case"spring":return f(t,n);case"cubicBezier":return s(m,a);case"steps":return s(d,a);default:return s(r,a)}}function y(t){try{return document.querySelectorAll(t)}catch(t){return}}function b(t,n){for(var e=t.length,r=arguments.length>=2?arguments[1]:void 0,a=[],i=0;i<e;i++)if(i in t){var o=t[i];n.call(r,o,i,t)&&a.push(o)}return a}function M(t){return t.reduce((function(t,n){return t.concat(c.arr(n)?M(n):n)}),[])}function x(t){return c.arr(t)?t:(c.str(t)&&(t=y(t)||t),t instanceof NodeList||t instanceof HTMLCollection?[].slice.call(t):[t])}function w(t,n){return t.some((function(t){return t===n}))}function O(t){var n={};for(var e in t)n[e]=t[e];return n}function T(t,n){var e=O(t);for(var r in t)e[r]=n.hasOwnProperty(r)?n[r]:t[r];return e}function P(t,n){var e=O(t);for(var r in n)e[r]=c.und(t[r])?n[r]:t[r];return e}function A(t){var n=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(t);if(n)return n[1]}function C(t,n){return c.fnc(t)?t(n.target,n.id,n.total):t}function E(t,n){return t.getAttribute(n)}function I(t,n,e){if(w([e,"deg","rad","turn"],A(n)))return n;var r=i.CSS[n+e];if(!c.und(r))return r;var a=document.createElement(t.tagName),o=t.parentNode&&t.parentNode!==document?t.parentNode:document.body;o.appendChild(a),a.style.position="absolute",a.style.width=100+e;var u=100/a.offsetWidth;o.removeChild(a);var s=u*parseFloat(n);return i.CSS[n+e]=s,s}function B(t,n,e){if(n in t.style){var r=n.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),a=t.style[n]||getComputedStyle(t).getPropertyValue(r)||"0";return e?I(t,a,e):a}}function k(t,n){return c.dom(t)&&!c.inp(t)&&(!c.nil(E(t,n))||c.svg(t)&&t[n])?"attribute":c.dom(t)&&w(a,n)?"transform":c.dom(t)&&"transform"!==n&&B(t,n)?"css":null!=t[n]?"object":void 0}function L(t){if(c.dom(t)){for(var n,e=t.style.transform||"",r=/(\w+)\(([^)]*)\)/g,a=new Map;n=r.exec(e);)a.set(n[1],n[2]);return a}}function S(t,n,e,r){switch(k(t,n)){case"transform":return function(t,n,e,r){var a=u(n,"scale")?1:0+function(t){return u(t,"translate")||"perspective"===t?"px":u(t,"rotate")||u(t,"skew")?"deg":void 0}(n),i=L(t).get(n)||a;return e&&(e.transforms.list.set(n,i),e.transforms.last=n),r?I(t,i,r):i}(t,n,r,e);case"css":return B(t,n,e);case"attribute":return E(t,n);default:return t[n]||0}}function R(t,n){var e=/^(\*=|\+=|-=)/.exec(t);if(!e)return t;var r=A(t)||0,a=parseFloat(n),i=parseFloat(t.replace(e[0],""));switch(e[0][0]){case"+":return a+i+r;case"-":return a-i+r;case"*":return a*i+r}}function F(t,n){if(c.col(t))return function(t){return c.rgb(t)?(e=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(n=t))?"rgba("+e[1]+",1)":n:c.hex(t)?function(t){var n=t.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(t,n,e,r){return n+n+e+e+r+r})),e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(n);return"rgba("+parseInt(e[1],16)+","+parseInt(e[2],16)+","+parseInt(e[3],16)+",1)"}(t):c.hsl(t)?function(t){var n,e,r,a=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(t)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(t),i=parseInt(a[1],10)/360,o=parseInt(a[2],10)/100,u=parseInt(a[3],10)/100,s=a[4]||1;function c(t,n,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?t+6*(n-t)*e:e<.5?n:e<2/3?t+(n-t)*(2/3-e)*6:t}if(0==o)n=e=r=u;else{var l=u<.5?u*(1+o):u+o-u*o,f=2*u-l;n=c(f,l,i+1/3),e=c(f,l,i),r=c(f,l,i-1/3)}return"rgba("+255*n+","+255*e+","+255*r+","+s+")"}(t):void 0;var n,e}(t);if(/\s/g.test(t))return t;var e=A(t),r=e?t.substr(0,t.length-e.length):t;return n?r+n:r}function D(t,n){return Math.sqrt(Math.pow(n.x-t.x,2)+Math.pow(n.y-t.y,2))}function N(t){for(var n,e=t.points,r=0,a=0;a<e.numberOfItems;a++){var i=e.getItem(a);a>0&&(r+=D(n,i)),n=i}return r}function j(t){if(t.getTotalLength)return t.getTotalLength();switch(t.tagName.toLowerCase()){case"circle":return function(t){return 2*Math.PI*E(t,"r")}(t);case"rect":return function(t){return 2*E(t,"width")+2*E(t,"height")}(t);case"line":return function(t){return D({x:E(t,"x1"),y:E(t,"y1")},{x:E(t,"x2"),y:E(t,"y2")})}(t);case"polyline":return N(t);case"polygon":return function(t){var n=t.points;return N(t)+D(n.getItem(n.numberOfItems-1),n.getItem(0))}(t)}}function q(t,n){var e=n||{},r=e.el||function(t){for(var n=t.parentNode;c.svg(n)&&c.svg(n.parentNode);)n=n.parentNode;return n}(t),a=r.getBoundingClientRect(),i=E(r,"viewBox"),o=a.width,u=a.height,s=e.viewBox||(i?i.split(" "):[0,0,o,u]);return{el:r,viewBox:s,x:s[0]/1,y:s[1]/1,w:o,h:u,vW:s[2],vH:s[3]}}function V(t,n,e){function r(e){void 0===e&&(e=0);var r=n+e>=1?n+e:0;return t.el.getPointAtLength(r)}var a=q(t.el,t.svg),i=r(),o=r(-1),u=r(1),s=e?1:a.w/a.vW,c=e?1:a.h/a.vH;switch(t.property){case"x":return(i.x-a.x)*s;case"y":return(i.y-a.y)*c;case"angle":return 180*Math.atan2(u.y-o.y,u.x-o.x)/Math.PI}}function $(t,n){var e=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g,r=F(c.pth(t)?t.totalLength:t,n)+"";return{original:r,numbers:r.match(e)?r.match(e).map(Number):[0],strings:c.str(t)||n?r.split(e):[]}}function _(t){return b(t?M(c.arr(t)?t.map(x):x(t)):[],(function(t,n,e){return e.indexOf(t)===n}))}function H(t){var n=_(t);return n.map((function(t,e){return{target:t,id:e,total:n.length,transforms:{list:L(t)}}}))}function X(t,n){var e=O(n);if(/^spring/.test(e.easing)&&(e.duration=f(e.easing)),c.arr(t)){var r=t.length;2!==r||c.obj(t[0])?c.fnc(n.duration)||(e.duration=n.duration/r):t={value:t}}var a=c.arr(t)?t:[t];return a.map((function(t,e){var r=c.obj(t)&&!c.pth(t)?t:{value:t};return c.und(r.delay)&&(r.delay=e?0:n.delay),c.und(r.endDelay)&&(r.endDelay=e===a.length-1?n.endDelay:0),r})).map((function(t){return P(t,e)}))}var G={css:function(t,n,e){return t.style[n]=e},attribute:function(t,n,e){return t.setAttribute(n,e)},object:function(t,n,e){return t[n]=e},transform:function(t,n,e,r,a){if(r.list.set(n,e),n===r.last||a){var i="";r.list.forEach((function(t,n){i+=n+"("+t+") "})),t.style.transform=i}}};function W(t,n){H(t).forEach((function(t){for(var e in n){var r=C(n[e],t),a=t.target,i=A(r),o=S(a,e,i,t),u=R(F(r,i||A(o)),o),s=k(a,e);G[s](a,e,u,t.transforms,!0)}}))}function Z(t,n){return b(M(t.map((function(t){return n.map((function(n){return function(t,n){var e=k(t.target,n.name);if(e){var r=function(t,n){var e;return t.tweens.map((function(r){var a=function(t,n){var e={};for(var r in t){var a=C(t[r],n);c.arr(a)&&1===(a=a.map((function(t){return C(t,n)}))).length&&(a=a[0]),e[r]=a}return e.duration=parseFloat(e.duration),e.delay=parseFloat(e.delay),e}(r,n),i=a.value,o=c.arr(i)?i[1]:i,u=A(o),s=S(n.target,t.name,u,n),l=e?e.to.original:s,f=c.arr(i)?i[0]:l,d=A(f)||A(s),h=u||d;return c.und(o)&&(o=l),a.from=$(f,h),a.to=$(R(o,f),h),a.start=e?e.end:0,a.end=a.start+a.delay+a.duration+a.endDelay,a.easing=g(a.easing,a.duration),a.isPath=c.pth(i),a.isPathTargetInsideSVG=a.isPath&&c.svg(n.target),a.isColor=c.col(a.from.original),a.isColor&&(a.round=1),e=a,a}))}(n,t),a=r[r.length-1];return{type:e,property:n.name,animatable:t,tweens:r,duration:a.end,delay:r[0].delay,endDelay:a.endDelay}}}(t,n)}))}))),(function(t){return!c.und(t)}))}function Q(t,n){var e=t.length,r=function(t){return t.timelineOffset?t.timelineOffset:0},a={};return a.duration=e?Math.max.apply(Math,t.map((function(t){return r(t)+t.duration}))):n.duration,a.delay=e?Math.min.apply(Math,t.map((function(t){return r(t)+t.delay}))):n.delay,a.endDelay=e?a.duration-Math.max.apply(Math,t.map((function(t){return r(t)+t.duration-t.endDelay}))):n.endDelay,a}var Y=0,z=[],J=function(){var t;function n(e){for(var r=z.length,a=0;a<r;){var i=z[a];i.paused?(z.splice(a,1),r--):(i.tick(e),a++)}t=a>0?requestAnimationFrame(n):void 0}return"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){U.suspendWhenDocumentHidden&&(K()?t=cancelAnimationFrame(t):(z.forEach((function(t){return t._onDocumentVisibility()})),J()))})),function(){t||K()&&U.suspendWhenDocumentHidden||!(z.length>0)||(t=requestAnimationFrame(n))}}();function K(){return!!document&&document.hidden}function U(e){void 0===e&&(e={});var r,a=0,i=0,u=0,s=0,l=null;function f(t){var n=window.Promise&&new Promise((function(t){return l=t}));return t.finished=n,n}var d=function(e){var r=T(t,e),a=T(n,e),i=function(t,n){var e=[],r=n.keyframes;for(var a in r&&(n=P(function(t){for(var n=b(M(t.map((function(t){return Object.keys(t)}))),(function(t){return c.key(t)})).reduce((function(t,n){return t.indexOf(n)<0&&t.push(n),t}),[]),e={},r=function(r){var a=n[r];e[a]=t.map((function(t){var n={};for(var e in t)c.key(e)?e==a&&(n.value=t[e]):n[e]=t[e];return n}))},a=0;a<n.length;a++)r(a);return e}(r),n)),n)c.key(a)&&e.push({name:a,tweens:X(n[a],t)});return e}(a,e),o=H(e.targets),u=Z(o,i),s=Q(u,a),l=Y;return Y++,P(r,{id:l,children:[],animatables:o,animations:u,duration:s.duration,delay:s.delay,endDelay:s.endDelay})}(e);function h(){var t=d.direction;"alternate"!==t&&(d.direction="normal"!==t?"normal":"reverse"),d.reversed=!d.reversed,r.forEach((function(t){return t.reversed=d.reversed}))}function p(t){return d.reversed?d.duration-t:t}function m(){a=0,i=p(d.currentTime)*(1/U.speed)}function v(t,n){n&&n.seek(t-n.timelineOffset)}function g(t){for(var n=0,e=d.animations,r=e.length;n<r;){var a=e[n],i=a.animatable,u=a.tweens,s=u.length-1,c=u[s];s&&(c=b(u,(function(n){return t<n.end}))[0]||c);for(var l=o(t-c.start-c.delay,0,c.duration)/c.duration,f=isNaN(l)?1:c.easing(l),h=c.to.strings,p=c.round,m=[],v=c.to.numbers.length,g=void 0,y=0;y<v;y++){var M=void 0,x=c.to.numbers[y],w=c.from.numbers[y]||0;M=c.isPath?V(c.value,f*x,c.isPathTargetInsideSVG):w+f*(x-w),p&&(c.isColor&&y>2||(M=Math.round(M*p)/p)),m.push(M)}var O=h.length;if(O){g=h[0];for(var T=0;T<O;T++){h[T];var P=h[T+1],A=m[T];isNaN(A)||(g+=P?A+P:A+" ")}}else g=m[0];G[a.type](i.target,a.property,g,i.transforms),a.currentValue=g,n++}}function y(t){d[t]&&!d.passThrough&&d[t](d)}function x(t){var n=d.duration,e=d.delay,c=n-d.endDelay,m=p(t);d.progress=o(m/n*100,0,100),d.reversePlayback=m<d.currentTime,r&&function(t){if(d.reversePlayback)for(var n=s;n--;)v(t,r[n]);else for(var e=0;e<s;e++)v(t,r[e])}(m),!d.began&&d.currentTime>0&&(d.began=!0,y("begin")),!d.loopBegan&&d.currentTime>0&&(d.loopBegan=!0,y("loopBegin")),m<=e&&0!==d.currentTime&&g(0),(m>=c&&d.currentTime!==n||!n)&&g(n),m>e&&m<c?(d.changeBegan||(d.changeBegan=!0,d.changeCompleted=!1,y("changeBegin")),y("change"),g(m)):d.changeBegan&&(d.changeCompleted=!0,d.changeBegan=!1,y("changeComplete")),d.currentTime=o(m,0,n),d.began&&y("update"),t>=n&&(i=0,d.remaining&&!0!==d.remaining&&d.remaining--,d.remaining?(a=u,y("loopComplete"),d.loopBegan=!1,"alternate"===d.direction&&h()):(d.paused=!0,d.completed||(d.completed=!0,y("loopComplete"),y("complete"),!d.passThrough&&"Promise"in window&&(l(),f(d)))))}return f(d),d.reset=function(){var t=d.direction;d.passThrough=!1,d.currentTime=0,d.progress=0,d.paused=!0,d.began=!1,d.loopBegan=!1,d.changeBegan=!1,d.completed=!1,d.changeCompleted=!1,d.reversePlayback=!1,d.reversed="reverse"===t,d.remaining=d.loop,r=d.children;for(var n=s=r.length;n--;)d.children[n].reset();(d.reversed&&!0!==d.loop||"alternate"===t&&1===d.loop)&&d.remaining++,g(d.reversed?d.duration:0)},d._onDocumentVisibility=m,d.set=function(t,n){return W(t,n),d},d.tick=function(t){u=t,a||(a=u),x((u+(i-a))*U.speed)},d.seek=function(t){x(p(t))},d.pause=function(){d.paused=!0,m()},d.play=function(){d.paused&&(d.completed&&d.reset(),d.paused=!1,z.push(d),m(),J())},d.reverse=function(){h(),d.completed=!d.reversed,m()},d.restart=function(){d.reset(),d.play()},d.remove=function(t){nt(_(t),d)},d.reset(),d.autoplay&&d.play(),d}function tt(t,n){for(var e=n.length;e--;)w(t,n[e].animatable.target)&&n.splice(e,1)}function nt(t,n){var e=n.animations,r=n.children;tt(t,e);for(var a=r.length;a--;){var i=r[a],o=i.animations;tt(t,o),o.length||i.children.length||r.splice(a,1)}e.length||r.length||n.pause()}U.version="3.2.1",U.speed=1,U.suspendWhenDocumentHidden=!0,U.running=z,U.remove=function(t){for(var n=_(t),e=z.length;e--;)nt(n,z[e])},U.get=S,U.set=W,U.convertPx=I,U.path=function(t,n){var e=c.str(t)?y(t)[0]:t,r=n||100;return function(t){return{property:t,el:e,svg:q(e),totalLength:j(e)*(r/100)}}},U.setDashoffset=function(t){var n=j(t);return t.setAttribute("stroke-dasharray",n),n},U.stagger=function(t,n){void 0===n&&(n={});var e=n.direction||"normal",r=n.easing?g(n.easing):null,a=n.grid,i=n.axis,o=n.from||0,u="first"===o,s="center"===o,l="last"===o,f=c.arr(t),d=f?parseFloat(t[0]):parseFloat(t),h=f?parseFloat(t[1]):0,p=A(f?t[1]:t)||0,m=n.start||0+(f?d:0),v=[],y=0;return function(t,n,c){if(u&&(o=0),s&&(o=(c-1)/2),l&&(o=c-1),!v.length){for(var g=0;g<c;g++){if(a){var b=s?(a[0]-1)/2:o%a[0],M=s?(a[1]-1)/2:Math.floor(o/a[0]),x=b-g%a[0],w=M-Math.floor(g/a[0]),O=Math.sqrt(x*x+w*w);"x"===i&&(O=-x),"y"===i&&(O=-w),v.push(O)}else v.push(Math.abs(o-g));y=Math.max.apply(Math,v)}r&&(v=v.map((function(t){return r(t/y)*y}))),"reverse"===e&&(v=v.map((function(t){return i?t<0?-1*t:-t:Math.abs(y-t)})))}return m+(f?(h-d)/y:d)*(Math.round(100*v[n])/100)+p}},U.timeline=function(t){void 0===t&&(t={});var e=U(t);return e.duration=0,e.add=function(r,a){var i=z.indexOf(e),o=e.children;function u(t){t.passThrough=!0}i>-1&&z.splice(i,1);for(var s=0;s<o.length;s++)u(o[s]);var l=P(r,T(n,t));l.targets=l.targets||t.targets;var f=e.duration;l.autoplay=!1,l.direction=e.direction,l.timelineOffset=c.und(a)?f:R(a,f),u(e),e.seek(l.timelineOffset);var d=U(l);u(d),o.push(d);var h=Q(o,t);return e.delay=h.delay,e.endDelay=h.endDelay,e.duration=h.duration,e.seek(0),e.reset(),e.autoplay&&e.play(),e},e},U.easing=g,U.penner=v,U.random=function(t,n){return Math.floor(Math.random()*(n-t+1))+t};const et=U;var rt=e(813);class at extends rt.Component{static componentCounter=0;duration;items;total;constructor({container:t,position:n,options:e}){super(t,n),this.duration=e&&e.duration?e.duration:2e3,this.items=e&&e.items?e.items:[],this.total=this.items.map((t=>t.amount)).getTotal(),this.fadeInAnimation=new it}}class it{async animate(t){const n=et.timeline({easing:"linear",delay:400});return t.items.forEach((e=>{const r=t.container.querySelector(e.textQuerySelector),a=t.container.querySelector(e.barQuerySelector);r&&a&&e.amount>0&&this.animateBarItem({timeline:n,itemText:r,itemBar:a,component:t,item:e})})),n}animateBarItem({timeline:t,itemText:n,itemBar:e,component:r,item:a}){const i={index:0},o=(r.duration-4e3-500*r.items.length)*(a.amount/r.total);t.add({targets:e,keyframes:[{opacity:0},{opacity:1}],easing:"linear",duration:100}).add({targets:i,index:a.amount,easing:"linear",round:1,duration:o,update:()=>{e.style.height=i.index/r.total*100+"%"},complete:()=>{n.innerHTML=a.amount+` ${a.title}`}}).add({targets:n,keyframes:[{translateX:5,skewX:"5deg",opacity:0},{translateX:0,skewX:"0deg",opacity:1}],duration:400})}}})(),PercentBarComponent=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,