var DraggableAction;(()=>{"use strict";var t={28:(t,e,n)=>{n.d(e,{checkElementCollision:()=>i,getCollisionDirection:()=>r,getDistanceFromBorder:()=>s});const o=new Map;function i(t,e){const n=t.getBoundingClientRect(),o=e.getBoundingClientRect();return!(n.top>o.bottom||n.right<o.left||n.bottom<o.top||n.left>o.right)}function r(t,e){const n=t.getBoundingClientRect(),o=e.getBoundingClientRect();return{top:n.bottom>o.top&&n.top<o.top+o.height/3,right:n.left<o.right&&n.right>o.right-o.width/3,center:n.top<o.bottom&&n.bottom>o.top&&n.left<o.right&&n.right>o.left,bottom:n.top<o.bottom-o.height/3&&n.bottom>o.bottom-o.height/3,left:n.right>o.left&&n.left<o.left+o.width/3}}function s(t,e){const n=t.getBoundingClientRect(),o=e.getBoundingClientRect(),i=n.left+n.width/2,r=n.top+n.height/2;return{top:r-o.top,right:o.right-i,bottom:o.bottom-r,left:i-o.left}}new Map,window.addEventListener("keydown",(t=>{for(const e of o)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},676:(t,e,n)=>{var o,i,r,s;n.d(e,{CollisionBorderDistanceExtras:()=>l}),function(t){t[t.PIXEL=0]="PIXEL",t[t.PERCENTAGE=1]="PERCENTAGE"}(o||(o={})),function(t){t[t.HORIZONTAL=0]="HORIZONTAL",t[t.VERTICAL=1]="VERTICAL"}(i||(i={})),function(t){t[t.FROM_TOP=0]="FROM_TOP",t[t.FROM_BOTTOM=1]="FROM_BOTTOM"}(r||(r={})),function(t){t[t.R=0]="R",t[t.G=1]="G",t[t.B=2]="B",t[t.A=3]="A"}(s||(s={}));class l{collisionBorderDistances;constructor(t){this.collisionBorderDistances=t}anyGreaterThan(t){return this.collisionBorderDistances.top>t||this.collisionBorderDistances.right>t||this.collisionBorderDistances.bottom>t||this.collisionBorderDistances.left>t}anyLowerThan(t){return this.collisionBorderDistances.top<t||this.collisionBorderDistances.right<t||this.collisionBorderDistances.bottom<t||this.collisionBorderDistances.left<t}anyEquals(t){return this.collisionBorderDistances.top===t||this.collisionBorderDistances.right===t||this.collisionBorderDistances.bottom===t||this.collisionBorderDistances.left===t}}}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={exports:{}};return t[o](r,r.exports,n),r.exports}n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};(()=>{n.r(o),n.d(o,{cleanNotCollidingElementsAttributesAndClasses:()=>g,getElementsInteractingSet:()=>m,initCollisionCheckOn:()=>h,insertIntoEventCheckList:()=>c,isValidTargetToTriggerEvent:()=>f,mapElementsCollidingByTargets:()=>i,mapElementsTriggeringEventsByTarget:()=>s,mapTargetsCollidingByTriggerElement:()=>r,setCollisionClasses:()=>d});var t=n(28),e=n(676);const i=new Map,r=new Map,s=new Map;let l;const a=new Map;function c(t,e,n){const o=a.get(e);o?o.push({triggerElement:t,events:n}):a.set(e,[{triggerElement:t,events:n}])}function g(t,e,n,o){t.delete(e)&&0===t.size&&o.triggerElement.classList.remove("colliding"),n.delete(o.triggerElement)&&0===n.size&&e.classList.remove("colliding")}function d(t,e){t.triggerElement.classList.add("colliding"),e.classList.add("colliding")}function h(e,n,o){c(e,n,o),l||(a.forEach(((t,e)=>{!function(t,e){document.querySelectorAll(e).forEach((e=>{t.forEach((t=>{t.events.forEach((t=>{t.autoInsertTargetClass&&e.classList.add(t.targetClass)}))}))}))}(t,e)})),l=setInterval((()=>{a.forEach((async(e,n)=>{!function(e,n){e.forEach((async e=>{const o=function(t){return i.has(t)||i.set(t,new Set),i.get(t)}(e);n.forEach((async n=>{if(n.triggerElement===e)return;const i=(s=n.triggerElement,r.has(s)||r.set(s,new Set),r.get(s));var s;(0,t.checkElementCollision)(n.triggerElement,e)?(i.add(e),o.add(n.triggerElement),d(n,e),await async function(e,n){const o=(0,t.getCollisionDirection)(e.triggerElement,n),i=(0,t.getDistanceFromBorder)(e.triggerElement,n);await Promise.all(e.events.map((async t=>{await t.onColliding(e.triggerElement,n,o,i)})))}(n,e)):await async function(t,e,n,o){g(t,e,n,o),await Promise.all(o.events.map((async t=>{await t.onNotColliding(o.triggerElement,e)})))}(i,e,o,n)}))}))}(Array.from(document.querySelectorAll(n)),e)}))}),50))}function f(t,n,o){return!!t.classList.contains(n)&&(!o||!new e.CollisionBorderDistanceExtras(o.distanceFromBorder).anyLowerThan(o.distanceThreshold))}function m(t){return s.has(t)||s.set(t,new Set),s.get(t)}})(),DraggableAction=o})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,