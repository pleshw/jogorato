var Grid;(()=>{"use strict";var t={801:(t,e,n)=>{n.d(e,{Cell:()=>i});class i{_content;fillState;openState;accessState;onContentChange;constructor({content:t,fillState:e,openState:n,accessState:i,onContentChange:f}={}){this._content=t,this.onContentChange=f||(()=>{}),this.fillState=e||s.EMPTY,this.openState=n||r.ALL,this.accessState=i||o.FREE}clear(){this.fillState=s.EMPTY,this.openState=r.ALL,this.accessState=o.FREE}get content(){return this._content}copy(t){this._content=t._content,this.fillState=t.fillState,this.openState=t.openState,this.accessState=t.accessState,this.onContentChange=t.onContentChange}static copyTo(t,e){e._content=t._content,e.fillState=t.fillState,e.openState=t.openState,e.accessState=t.accessState,e.onContentChange=t.onContentChange}set content(t){this.onContentChange(this,t),this._content=t}}var r,o,s;!function(t){t[t.NONE=0]="NONE",t[t.TOP=1]="TOP",t[t.RIGHT=2]="RIGHT",t[t.BOTTOM=4]="BOTTOM",t[t.LEFT=8]="LEFT",t[t.TOP_RIGHT=16]="TOP_RIGHT",t[t.TOP_LEFT=32]="TOP_LEFT",t[t.BOTTOM_RIGHT=64]="BOTTOM_RIGHT",t[t.BOTTOM_LEFT=128]="BOTTOM_LEFT",t[t.ALL=255]="ALL"}(r||(r={})),function(t){t[t.FREE=0]="FREE",t[t.BLOCKED=1]="BLOCKED",t[t.VISITED=2]="VISITED"}(o||(o={})),function(t){t[t.EMPTY=0]="EMPTY",t[t.FILLED=1]="FILLED",t[t.FULL=2]="FULL"}(s||(s={}))},19:(t,e,n)=>{function i(t,e,n){return t*n+e}n.d(e,{rowColToIndex:()=>i})}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{n.r(i),n.d(i,{Grid:()=>r});var t=n(801),e=n(19);class r{_dimensions;_buffer;constructor({dimensions:t,filler:e}){this._dimensions=t,this._buffer=void 0!==e?r.getBufferFromFiller(this._dimensions,e,this):r.getEmptyBuffer(this._dimensions)}overrideWith(e){const n=new t.Cell;for(let t=0;t<this._buffer.length;++t)e.tryGetCellByIndex(t,n)&&this._buffer[t].copy(n)}get width(){return this._dimensions.width}get height(){return this._dimensions.height}get buffer(){return this._buffer}*[Symbol.iterator](){for(let t=0;t<this._buffer.length;++t)yield this._buffer[t]}forEach(t){for(let e=0;e<this._buffer.length;++e)t(this._buffer[e],e,this.buffer)}tryGetCellByIndex(t,e){return!!this._buffer[t]&&(e.copy(this._buffer[t]),!0)}tryGetCell(t,e,n){return!!this.getCell(t,e)&&(n.copy(this.getCell(t,e)),!0)}setCell(t,n,i){return this._buffer[(0,e.rowColToIndex)(n,t,this.width)]=i}getCell(t,n){return this._buffer[(0,e.rowColToIndex)(n,t,this.width)]}copy(t){this._dimensions=t._dimensions,this._buffer=r.getEmptyBuffer(t._dimensions);for(let e=0;e<t._buffer.length;++e)this.buffer[e]=t._buffer[e]}static copyTo(t,e){e._dimensions=t._dimensions,e._buffer=r.getEmptyBuffer(t._dimensions);for(let n=0;n<t._buffer.length;++n)e._buffer[n]=t._buffer[n]}static getEmptyBuffer(e){return[...Array(e.width*e.height)].map((()=>new t.Cell))}static getBufferFromFiller(t,e,n){return[...Array(t.width*t.height)].map(((t,i)=>e(i,n)))}}})(),Grid=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,