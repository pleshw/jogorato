var MovableElement;(()=>{"use strict";var t={28:(t,e,o)=>{o.d(e,{getTransformCoordsFromElement:()=>i});var n=o(19);const r=new Map;function i(t){const e=(window.getComputedStyle(t).transform.match(n.regexNumberPattern)??[0,0]).map((t=>+t));return{x:void 0!==e[4]?Math.round(e[4]):0,y:void 0!==e[5]?Math.round(e[5]):0}}new Map,window.addEventListener("keydown",(t=>{for(const e of r)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},19:(t,e,o)=>{o.d(e,{regexNumberPattern:()=>n});const n=/-?\d+\.?\d*/g}},e={};function o(n){var r=e[n];if(void 0!==r)return r.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,o),i.exports}o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};(()=>{o.r(n),o.d(n,{MovableElement:()=>e});var t=o(28);class e{element;movingState;intervalUpdatePosition;constructor(t){if(!t)throw new Error("Null movable element. Please pass a valid element in constructor.");this.element=t,this.movingState={pos:{x:0,y:0},delta:{dx:0,dy:0}},this.intervalUpdatePosition=setInterval(this.updatePosition.bind(this),200)}get position(){return this.movingState.pos}set position(t){this.moveTo(t.x,t.y)}get x(){return this.movingState.pos.x}set x(t){this.moveTo(t,this.y)}get y(){return this.movingState.pos.y}set y(t){this.moveTo(this.x,t)}updatePosition(){this.movingState.pos=(0,t.getTransformCoordsFromElement)(this.element),this.movingState.delta.dx=0,this.movingState.delta.dy=0}moveTo(t,e){this.movingState.pos={x:t+this.movingState.delta.dx,y:e+this.movingState.delta.dy},this.element.style.transform=`translate(${this.movingState.pos.x}px, ${this.movingState.pos.y}px)`}static makeElementMovable(t){return new e(t)}}})(),MovableElement=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,