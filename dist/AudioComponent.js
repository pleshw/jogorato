var AudioComponent;(()=>{"use strict";var t={901:(t,e,n)=>{n.d(e,{createInvisiblePlayer:()=>s}),n(936);var i=n(28),o=n(234);function s(t,e){const n=document.createElement("div");n.classList.add("audio-container"),n.insertAdjacentHTML("afterbegin",function(t,e){return`<audio controls ${e?function(t){return` ${t.id?'id="'+t.id+'"':""} ${t.autoPlay||t.autoplay?"autoplay":""} ${t.muted?"muted":""} ${t.loop?"loop":""} ${t.preload?'preload="'+t.preload+'"':""}`.trimEnd()}(e):""}>\n    ${t.map((t=>function(t){return`<source src="${t}" type="audio/${(0,o.getFileExtension)(t)}">`}(t))).reduce(((t,e)=>t+e),"")}\n  </audio>`}(t,e));const s=n.childNodes[0],r=function(t,e){const n=document.createElement("button");return n.classList.add("play-button"),setTimeout((()=>{t.paused&&n.classList.add("paused")}),300),n.addEventListener("click",(()=>{t.paused?(t.play(),n.classList.remove("paused")):(t.pause(),n.classList.add("paused"))})),function(t,e,n){e.addEventListener("play",(()=>{t.classList.remove("paused"),n&&n.onPlay&&n.onPlay(e),n&&n.onplay&&n.onplay(e)})),e.addEventListener("pause",(()=>{t.classList.add("paused"),n&&n.onPause&&n.onPause(e),n&&n.onpause&&n.onpause(e)}))}(n,t,e),n}(s,e);return n.insertAdjacentElement("beforeend",r),document.body.insertAdjacentElement("afterbegin",n),(0,i.hideElement)(s),(0,i.hideElement)(r),n}},813:(t,e,n)=>{n.d(e,{Component:()=>o});var i=n(676);class o{position;container;fadeInAnimation;fadeOutAnimation;constructor(t,e,n,i){this.container=t,this.fadeInAnimation=n,this.fadeOutAnimation=i,e&&this.setupPosition(e)}async build(t){t&&t.mainLayer&&t.mainLayer.element.insertAdjacentElement("beforeend",this.container),this.container.style.display="flex",this.fadeInAnimation&&await this.fadeInAnimation.animate(this)}setupPosition(t){this.position=t,this.container.style.position="absolute",this.container.style.display="none",this.container.style.left=t.horizontal,t.verticalReference===i.VERTICAL_REFERENCE.FROM_TOP?this.container.style.top=t.vertical:this.container.style.bottom=t.vertical}async destroy(){this.fadeOutAnimation&&await this.fadeOutAnimation.animate(this),this.container.style.display="none"}}},28:(t,e,n)=>{n.d(e,{addActionKey:()=>o,hideElement:()=>s});const i=new Map;function o(t,e){i.has(t)?i.set(t,[e,...i.get(t)]):i.set(t,[e])}function s(t){t.style.display="block",t.style.position="absolute",t.style.zIndex="-1",t.style.opacity="0",t.style.width="0px !important",t.style.height="0px !important",t.setAttribute("hidden","")}new Map,window.addEventListener("keydown",(t=>{for(const e of i)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},234:(t,e,n)=>{n.d(e,{getFileExtension:()=>o});var i=n(902);function o(t){if((0,i.isNullOrEmpty)(t))return"";const e=t.split(".").pop();if(e&&e!==t)return e;const n=t.split("/").pop();return n&&n!==t?n:""}},936:()=>{String.prototype.isNullOrEmpty=function(){return"string"!=typeof this&&!this&&""!==this},String.prototype.truncate=function(t,e="..."){return(this.length>t?this.substring(0,t)+e:this).toString()},String.prototype.removeAccents=function(){return this.normalize("NFD").replace(/[\u0300-\u036f]/g,"")},String.prototype.capitalizeFirstLetter=function(){return"string"!=typeof this?"":this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.zeroBefore=function(){return this.padStart(2,"0")}},902:(t,e,n)=>{function i(t){return"string"!=typeof t||!t||""===t}n.d(e,{isNullOrEmpty:()=>i})},676:(t,e,n)=>{var i,o,s,r;n.d(e,{CONVERSION_UNIT:()=>i,CSSPosition:()=>a,VERTICAL_REFERENCE:()=>s}),function(t){t[t.PIXEL=0]="PIXEL",t[t.PERCENTAGE=1]="PERCENTAGE"}(i||(i={})),function(t){t[t.HORIZONTAL=0]="HORIZONTAL",t[t.VERTICAL=1]="VERTICAL"}(o||(o={})),function(t){t[t.FROM_TOP=0]="FROM_TOP",t[t.FROM_BOTTOM=1]="FROM_BOTTOM"}(s||(s={})),function(t){t[t.R=0]="R",t[t.G=1]="G",t[t.B=2]="B",t[t.A=3]="A"}(r||(r={}));class a{x;y;type;verticalReference;constructor({x:t,y:e,verticalReference:n=s.FROM_TOP,type:o=i.PIXEL}){[this.x,this.y,this.verticalReference,this.type]=[t,e,n,o]}get horizontal(){switch(this.type){case i.PIXEL:return`${this.x}px`;case i.PERCENTAGE:return`${this.x}%`;default:return`${this.x}px`}}get vertical(){switch(this.type){case i.PIXEL:return`${this.y}px`;case i.PERCENTAGE:return`${this.y}%`;default:return`${this.y}px`}}}}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var s=e[i]={exports:{}};return t[i](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{n.r(i),n.d(i,{AudioComponent:()=>r}),n(936);var t=n(901),e=n(813),o=n(28),s=n(676);class r extends e.Component{audioElement;playerConfig;constructor(e,n){super((0,t.createInvisiblePlayer)([e],n),new s.CSSPosition({x:10,y:5,verticalReference:s.VERTICAL_REFERENCE.FROM_TOP,type:s.CONVERSION_UNIT.PERCENTAGE})),this.audioElement=this.container.querySelector("audio"),this.playerConfig=n,(0,o.addActionKey)("Space",(()=>this.audioElement.paused?this.audioElement.play():this.audioElement.pause()))}}})(),AudioComponent=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,