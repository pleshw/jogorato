var DotDrawing;(()=>{"use strict";var t={689:()=>{CanvasRenderingContext2D.prototype.extensionFunction=function(t,i,e,n,s,a,o,h,r){var l,d=(t=(t=t.replace(/[\n]/g," \n ")).replace(/\r/g,"")).split(/[ ]+/),c=this.measureText(" ").width,v=[],m=0,u=0;v[m]={},v[m].Words=[];let C=0;for(;C<d.length;){var g=d[C];if("\n"==g)v[m].EndParagraph=!0,u=0,v[++m]={},v[m].Words=[],C++;else if((l={}).l=this.measureText(g).width,0===u){for(;l.l>n;)g=g.slice(0,g.length-1),l.l=this.measureText(g).width;if(""===g)return;l.word=g,v[m].Words.push(l),u=l.l,g!=d[C]?d[C]=d[C].slice(g.length,d[C].length):C++}else u+c+l.l>n?(v[m].EndParagraph=!1,u=0,v[++m]={},v[m].Words=[]):(l.word=g,v[m].Words.push(l),u+=c+l.l,C++)}0===u&&v[m].pop(),v[m].EndParagraph=!0;for(var f,x=h*v.length;x>s;)v.pop(),x=h*v.length;f="bottom"==o?e+s-x+h:"center"==o?e+s/2-x/2+h:e+h;var p=this.textAlign;for(var y in this.textAlign="left",v){var w,b,I=0;for(l in v[y].Words)I+=v[y].Words[l].l;for(l in"center"==a?(b=c,w=i+n/2-(I+c*(v[y].Words.length-1))/2):"justify"!=a||v[y].EndParagraph?"right"==a?(w=i+n-(I+c*(v[y].Words.length-1)),b=c):(w=i,b=c):(w=i,b=(n-I)/(v[y].Words.length-1)),v[y].Words)"fillText"==r?this.fillText(v[y].Words[l].word,w,f):"strokeText"==r&&this.strokeText(v[y].Words[l].word,w,f),w+=v[y].Words[l].l+b;f+=h}this.textAlign=p},CanvasRenderingContext2D.prototype.extensionFillText=function(t,i,e,n,s,a,o,h){this.extensionFunction(t,i,e,n,s,o,a,h,"fillText")},CanvasRenderingContext2D.prototype.extensionStrokeText=function(t,i,e,n,s,a,o,h){this.extensionFunction(t,i,e,n,s,o,a,h,"strokeText")}},605:(t,i,e)=>{function n(t,i,e=4){return{x:t/e%i,y:Math.floor(Math.floor(t/i)/e)}}e.d(i,{getPixelPositionByCanvasWidth:()=>n}),e(676),e(173)},173:(t,i,e)=>{e(19),Symbol.iterator},813:(t,i,e)=>{e.d(i,{Component:()=>s});var n=e(676);class s{position;container;fadeInAnimation;fadeOutAnimation;constructor(t,i,e,n){this.container=t,this.fadeInAnimation=e,this.fadeOutAnimation=n,i&&this.setupPosition(i)}async build(t){t&&t.mainLayer&&t.mainLayer.element.insertAdjacentElement("beforeend",this.container),this.container.style.display="flex",this.fadeInAnimation&&await this.fadeInAnimation.animate(this)}setupPosition(t){this.position=t,this.container.style.position="absolute",this.container.style.display="none",this.container.style.left=t.horizontal,t.verticalReference===n.VERTICAL_REFERENCE.FROM_TOP?this.container.style.top=t.vertical:this.container.style.bottom=t.vertical}async destroy(){this.fadeOutAnimation&&await this.fadeOutAnimation.animate(this),this.container.style.display="none"}}},631:()=>{HTMLElement.prototype.removeAllChildren=function(){for(;this.hasChildNodes();)this.firstChild&&this.removeChild(this.firstChild)},HTMLElement.prototype.makeCover=function(){this.style.display="flex",this.style.width="100%",this.style.height="100%",this.style.position="absolute",this.style.top="0",this.style.left="0"}},93:(t,i,e)=>{e.d(i,{Dot:()=>s});var n=e(19);class s{x;y;radius;color;context;alpha=0;constructor(t,i,e,n,s){this.x=t,this.y=i,this.color=n,this.context=s,this.radius=e}draw(){this.context.beginPath(),this.context.arc(this.x,this.y,this.radius,0,2*Math.PI,!1),this.context.fillStyle=`rgba(${this.color.toString()})`,this.context.fill()}drawRandomAlpha(){this.context.beginPath(),this.context.arc(this.x,this.y,this.radius,0,3*Math.PI,!1),this.context.fillStyle=`rgba(${this.color.toStringWithoutAlpha()}, 0.${(0,n.getRandomIntInclusive)(1,5)})`,this.context.fill()}drawFromTweenMax(){this.context.beginPath(),this.context.arc(this.x,this.y,this.radius,0,3*Math.PI,!1),this.context.fillStyle=`rgba(${this.color.toStringWithoutAlpha()}, ${this.alpha})`,this.context.fill()}}},234:(t,i,e)=>{e.d(i,{getFileExtension:()=>s});var n=e(902);function s(t){if((0,n.isNullOrEmpty)(t))return"";const i=t.split(".").pop();if(i&&i!==t)return i;const e=t.split("/").pop();return e&&e!==t?e:""}},335:(t,i,e)=>{e.d(i,{getCanvasResizeImage:()=>a,getImageByURL:()=>s}),e(605);var n=e(234);async function s(t){return new Promise((async i=>{const e=new Image;e.src=await fetch(t).then((t=>t.blob())).then((t=>URL.createObjectURL(t))),e.setAttribute("type",(0,n.getFileExtension)(t)),e.onload=()=>{i(e)}}))}async function a(t,i,e){const n=e&&e.resultCanvasId&&document.getElementById(e.resultCanvasId)||document.createElement("canvas"),s=e&&e.resultCanvasContext?e.resultCanvasContext:n.getContext("2d"),a=function({srcDimensions:t,outputDimensions:i}){if(i.width&&i.width>0){const e=i.width/t.width;return{width:i.width,height:t.height*e}}if(i.height&&i.height>0){const e=i.height/t.height;return{width:t.width*e,height:i.height}}return{width:t.width,height:t.height}}({srcDimensions:t,outputDimensions:i});n.width=a.width,n.height=a.height;const o=e&&e.resizeCanvasId&&document.getElementById(e.resizeCanvasId)||document.createElement("canvas"),h=e&&e.resizeCanvasContext?e.resizeCanvasContext:n.getContext("2d");return o.width=a.width,o.height=a.height,h.drawImage(t,0,0,o.width,o.height),h.drawImage(t,0,0,o.width,o.height),s.drawImage(o,0,0,o.width,o.height,0,0,n.width,n.height),{canvas:n,context:s}}},19:(t,i,e)=>{function n(t,i){return Math.floor(Math.random()*(i-t)+t)}function s(t,i){return t=Math.ceil(t),i=Math.floor(i),Math.floor(Math.random()*(i-t+1))+t}function a(t=0,i=0,e=100){return Math.max(i,Math.min(t,e))}e.d(i,{clamp:()=>a,getRandomIntExclusive:()=>n,getRandomIntInclusive:()=>s})},902:(t,i,e)=>{function n(t){return"string"!=typeof t||!t||""===t}e.d(i,{isNullOrEmpty:()=>n})},676:(t,i,e)=>{var n,s,a,o;e.d(i,{CONVERSION_UNIT:()=>n,CSSPosition:()=>h,VERTICAL_REFERENCE:()=>a}),function(t){t[t.PIXEL=0]="PIXEL",t[t.PERCENTAGE=1]="PERCENTAGE"}(n||(n={})),function(t){t[t.HORIZONTAL=0]="HORIZONTAL",t[t.VERTICAL=1]="VERTICAL"}(s||(s={})),function(t){t[t.FROM_TOP=0]="FROM_TOP",t[t.FROM_BOTTOM=1]="FROM_BOTTOM"}(a||(a={})),function(t){t[t.R=0]="R",t[t.G=1]="G",t[t.B=2]="B",t[t.A=3]="A"}(o||(o={}));class h{x;y;type;verticalReference;constructor({x:t,y:i,verticalReference:e=a.FROM_TOP,type:s=n.PIXEL}){[this.x,this.y,this.verticalReference,this.type]=[t,i,e,s]}get horizontal(){switch(this.type){case n.PIXEL:return`${this.x}px`;case n.PERCENTAGE:return`${this.x}%`;default:return`${this.x}px`}}get vertical(){switch(this.type){case n.PIXEL:return`${this.y}px`;case n.PERCENTAGE:return`${this.y}%`;default:return`${this.y}px`}}}}},i={};function e(n){var s=i[n];if(void 0!==s)return s.exports;var a=i[n]={exports:{}};return t[n](a,a.exports,e),a.exports}e.n=t=>{var i=t&&t.__esModule?()=>t.default:()=>t;return e.d(i,{a:i}),i},e.d=(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},e.o=(t,i)=>Object.prototype.hasOwnProperty.call(t,i),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};(()=>{e.r(n),e.d(n,{DotDrawing:()=>r}),e(631),e(689);var t=e(19),i=e(93),s=e(676),a=e(813),o=e(335),h=e(605);class r extends a.Component{invisibleCanvas;dotsAmount;invisibleCanvasContext;invisibleCanvasWidth=window.innerWidth;invisibleCanvasHeight=window.innerHeight;numberOffsetX;numberOffsetY;mainCanvas;mainCanvasContext;mainCanvasWidth;mainCanvasHeight;mainCanvasCenterX;mainCanvasCenterY;timePerPhrase;isAnimationRunning=!1;dots;numberPixelCoordinates=[];dotsMaxRadius;interactionGenerator;colors;fontFamily;fontSize;onAnimationEnd;content;constructor({content:e,timePerPhrase:n,dotsAmount:a,dotsMaxRadius:o,colors:h,fontFamily:r,onAnimationEnd:l,fontSize:d}){super(document.getElementById("canvas-number"),new s.CSSPosition({x:0,y:0,verticalReference:s.VERTICAL_REFERENCE.FROM_TOP,type:s.CONVERSION_UNIT.PIXEL})),this.fontSize=d,this.onAnimationEnd=l,this.fontFamily=r,this.content=e,this.timePerPhrase=n,this.dotsAmount=a,this.dotsMaxRadius=o,this.colors=h,this.mainCanvasWidth=window.innerWidth,this.mainCanvasHeight=window.innerHeight,this.mainCanvasCenterX=this.mainCanvasWidth/2,this.mainCanvasCenterY=this.mainCanvasHeight/2,this.invisibleCanvas=document.getElementById("canvas-number"),this.invisibleCanvasContext=this.invisibleCanvas.getContext("2d",{alpha:!0,willReadFrequently:!0}),this.invisibleCanvas.width=this.invisibleCanvasWidth,this.invisibleCanvas.height=this.invisibleCanvasHeight,this.mainCanvas=document.getElementById("canvas-dots"),this.mainCanvasContext=this.mainCanvas.getContext("2d",{alpha:!0,willReadFrequently:!0}),this.mainCanvas.width=this.mainCanvasWidth,this.mainCanvas.height=this.mainCanvasHeight,this.numberOffsetX=(this.mainCanvasWidth-this.invisibleCanvasWidth)/2,this.numberOffsetY=(this.mainCanvasHeight-this.invisibleCanvasHeight)/2,this.interactionGenerator=this.generateInteraction(),this.dots=[];for(var c=0;c<this.dotsAmount;c++){var v=new i.Dot((0,t.getRandomIntExclusive)(0,this.mainCanvasWidth),(0,t.getRandomIntExclusive)(0,this.mainCanvasHeight),this.dotsMaxRadius,this.colors[(0,t.getRandomIntExclusive)(0,this.colors.length-1)],this.mainCanvasContext);this.dots.push(v),this.tweenDots(v,void 0,"space")}}init(){this.isAnimationRunning=!0,this.setInteractionsCountdownCanvas(),this.loopCountdownCanvas()}drawImageFromBackgroundCanvas(){var t=this.invisibleCanvasContext.getImageData(0,0,this.invisibleCanvasWidth,this.invisibleCanvasHeight).data;let i=[];for(var e=t.length;e>=0;e-=4)if(0!==t[e]){const t=(0,h.getPixelPositionByCanvasWidth)(e,this.invisibleCanvasWidth),n=t.x&&t.x%(2*this.dotsMaxRadius+2)==0,s=t.y&&t.y%(2*this.dotsMaxRadius+2)==0;n&&s&&i.push(t)}this.formNumber(i)}formNumber(t){for(var i=0;i<t.length;i++)this.tweenDots(this.dots[i],t[i],void 0);this.isAnimationRunning&&setTimeout((()=>{this.breakNumber(t)}),this.timePerPhrase)}breakNumber(t){for(var i=0;i<t.length;i++)this.tweenDots(this.dots[i],void 0,"space");if(this.isAnimationRunning)setTimeout((()=>{this.setInteractionsCountdownCanvas()}),this.timePerPhrase);else{for(i=0;i<this.dots.length;i++)this.tweenDots(this.dots[i],void 0,"end");this.onAnimationEnd&&this.onAnimationEnd()}}setInteractionsCountdownCanvas(){this.interactionGenerator.next(),0===this.content.length&&(this.isAnimationRunning=!1)}async*generateInteraction(){for(;this.content.length>0;){const t=this.content.shift();if(t)switch(t.type){case"text":default:yield this.drawNumber(t.src);break;case"image":yield await this.drawImage(t.src)}}}drawNumber(t){this.invisibleCanvasContext.clearRect(0,0,this.invisibleCanvasWidth,this.invisibleCanvasHeight),this.invisibleCanvasContext.fillStyle="#24282f",this.invisibleCanvasContext.textAlign="center",this.invisibleCanvasContext.textBaseline="middle",this.invisibleCanvasContext.font=`${this.fontSize||168}px ${this.fontFamily||"sans-serif"}`,this.invisibleCanvasContext.extensionFillText(t,0,0,window.innerWidth,window.innerHeight,"center","center",this.fontSize?this.fontSize+30:180),this.drawImageFromBackgroundCanvas()}async drawImage(t){this.invisibleCanvasContext.clearRect(0,0,this.invisibleCanvasWidth,this.invisibleCanvasHeight);const i=await(0,o.getImageByURL)(t);(0,o.getCanvasResizeImage)(i,{height:i.height>300?300:-1,width:-1},{resultCanvasId:this.invisibleCanvas.id,resultCanvasContext:this.invisibleCanvasContext}),this.drawImageFromBackgroundCanvas()}tweenDots(i,e,n){i&&("space"===n?TweenMax.to(i,3+Math.round(100*Math.random())/100,{x:(0,t.getRandomIntInclusive)(0,this.mainCanvasWidth),y:(0,t.getRandomIntInclusive)(0,this.mainCanvasHeight),alpha:0,ease:Cubic.easeIn,onComplete:()=>{this.tweenDots(i,void 0,"space")}}):"end"===n?TweenMax.to(i,3+Math.round(100*Math.random())/100,{x:window.innerWidth/2,y:+window.innerHeight+50,alpha:0,ease:Cubic.easeInOut,onComplete:()=>{}}):e&&TweenMax.to(i,1.5+Math.round(100*Math.random())/100,{x:e.x+this.numberOffsetX,y:e.y+this.numberOffsetY,delay:0,alpha:1,ease:Cubic.easeInOut,onComplete:()=>{}}))}loopCountdownCanvas(){this.mainCanvasContext.clearRect(0,0,this.mainCanvasWidth,this.mainCanvasHeight);for(var t=0;t<this.dots.length;t++)this.dots[t].drawFromTweenMax();requestAnimationFrame((()=>this.loopCountdownCanvas()))}}})(),DotDrawing=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,