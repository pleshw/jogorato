var CollisionEvents;(()=>{"use strict";var t={28:(t,e,n)=>{n.d(e,{getDefaultAttributeForTarget:()=>o,getTransformCoordsFromElement:()=>a});var i=n(19);const s=new Map,r=new Map;function o(t,e){r.has(t)||r.set(t,new Map);let n="";const i=r.get(t);return n=(i.has(e)?i.get(e):t.getAttribute(e))||"",function(t,e,n){r.has(t)||r.set(t,new Map),r.get(t).set(e,n)}(t,e,n),n}function a(t){const e=(window.getComputedStyle(t).transform.match(i.regexNumberPattern)??[0,0]).map((t=>+t));return{x:void 0!==e[4]?Math.round(e[4]):0,y:void 0!==e[5]?Math.round(e[5]):0}}window.addEventListener("keydown",(t=>{for(const e of s)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},513:(t,e,n)=>{n.d(e,{getElementsInteractingSet:()=>a,isValidTargetToTriggerEvent:()=>o,mapTargetsCollidingByTriggerElement:()=>s}),n(28);var i=n(676);new Map;const s=new Map,r=new Map;function o(t,e,n){return!!t.classList.contains(e)&&(!n||!new i.CollisionBorderDistanceExtras(n.distanceFromBorder).anyLowerThan(n.distanceThreshold))}function a(t){return r.has(t)||r.set(t,new Set),r.get(t)}new Map},19:(t,e,n)=>{n.d(e,{regexNumberPattern:()=>i});const i=/-?\d+\.?\d*/g},444:(t,e,n)=>{n.d(e,{PinCollisionEvent:()=>r});var i=n(28),s=n(513);class r{onPin;onUnpin;pinPositionFormula;targetClass="pin-target";autoInsertTargetClass=!0;constructor({pinPositionFormula:t,onPin:e,onUnpin:n}){this.pinPositionFormula=t||void 0,this.onPin=e||void 0,this.onUnpin=n||void 0}async onColliding(t,e,n,r){if(!(0,s.isValidTargetToTriggerEvent)(e,this.targetClass))return;const o=(0,s.getElementsInteractingSet)(e),a="total-pinned-elements";if(t.classList.contains("dragging"))return t.classList.remove("pinned"),t.classList.add("ready-to-pin"),void(o.delete(t)&&(this.onElementInteractionChange(e,o,a),!this.onUnpin||this.onUnpin(t,e)));this.pinPositionFormula?function(t,e,n,s){const r=e.getBoundingClientRect(),o=s(t.getBoundingClientRect(),r,(0,i.getTransformCoordsFromElement)(t),n);t.style.transform=`translate(${o.x}px, ${o.y}px)`}(t,e,r,this.pinPositionFormula):function(t,e,n){const s=e.getBoundingClientRect(),r=(0,i.getTransformCoordsFromElement)(t),o=r.x+n.right,a=r.y+n.bottom;t.style.transform=`translate(${Math.round(o-s.width/2)}px, ${Math.round(a-s.height/2)}px)`}(t,e,r),o.has(t)||(o.add(t),!this.onPin||this.onPin(t,e)),t.classList.add("pinned"),t.classList.remove("ready-to-pin"),this.onElementInteractionChange(e,o,a)}async onNotColliding(t,e){const n=(0,s.getElementsInteractingSet)(e);n.delete(t),n.size>0?e.classList.add("has-pinned-elements"):e.classList.remove("has-pinned-elements"),s.mapTargetsCollidingByTriggerElement.has(t)||s.mapTargetsCollidingByTriggerElement.set(t,new Set);const i=s.mapTargetsCollidingByTriggerElement.get(t);i.delete(e)&&0===i.size&&t.classList.remove("pinned","ready-to-pin")}onElementInteractionChange(t,e,n){e.size>0?t.classList.add("has-pinned-elements"):t.classList.remove("has-pinned-elements"),t.setAttribute(n,e.size.toString())}}},579:(t,e,n)=>{n.d(e,{ShareAttributeCollisionEvent:()=>o});var i=n(28),s=n(513);const r={keepAttribute:!1};class o{keepAttribute;targetClass="attribute-target";autoInsertTargetClass=!0;constructor(t=r){this.keepAttribute=t.keepAttribute||!1}async onColliding(t,e,n,i){const r=t.getAttribute("shared-attribute-name"),o=t.getAttribute("shared-attribute-value");if(!o||!r||!(0,s.isValidTargetToTriggerEvent)(e,this.targetClass))return;const a=(0,s.getElementsInteractingSet)(e),l="total-sharing-attributes";t.classList.contains("dragging")?(t.classList.remove("sharing-attribute"),t.classList.add("ready-to-share-attribute"),this.handleElementInteractionShareAttribute(t,e,a,l)):(t.classList.add("sharing-attribute"),t.classList.remove("ready-to-share-attribute"),e.setAttribute(r,o),a.add(t),this.handleElementInteractionShareAttribute(t,e,a,l))}async onNotColliding(t,e){(0,s.getElementsInteractingSet)(e).size>0?e.classList.add("sharing-attribute"):this.onSharedAttributeEmpty(t,e),s.mapTargetsCollidingByTriggerElement.has(t)||s.mapTargetsCollidingByTriggerElement.set(t,new Set);const n=s.mapTargetsCollidingByTriggerElement.get(t);(n.delete(e)||0===n.size)&&t.classList.remove("sharing-attribute","ready-to-share-attribute")}handleElementInteractionShareAttribute(t,e,n,i){n.size>0?e.classList.add("sharing-attribute"):this.onSharedAttributeEmpty(t,e),e.setAttribute(i,n.size.toString())}onSharedAttributeEmpty(t,e){e.classList.remove("sharing-attribute");const n=t.getAttribute("shared-attribute-name");if(n){const t=(0,i.getDefaultAttributeForTarget)(e,n);t?e.setAttribute(n,t):this.keepAttribute||e.removeAttribute(n)}}}},676:(t,e,n)=>{var i,s,r,o;n.d(e,{CollisionBorderDistanceExtras:()=>a}),function(t){t[t.PIXEL=0]="PIXEL",t[t.PERCENTAGE=1]="PERCENTAGE"}(i||(i={})),function(t){t[t.HORIZONTAL=0]="HORIZONTAL",t[t.VERTICAL=1]="VERTICAL"}(s||(s={})),function(t){t[t.FROM_TOP=0]="FROM_TOP",t[t.FROM_BOTTOM=1]="FROM_BOTTOM"}(r||(r={})),function(t){t[t.R=0]="R",t[t.G=1]="G",t[t.B=2]="B",t[t.A=3]="A"}(o||(o={}));class a{collisionBorderDistances;constructor(t){this.collisionBorderDistances=t}anyGreaterThan(t){return this.collisionBorderDistances.top>t||this.collisionBorderDistances.right>t||this.collisionBorderDistances.bottom>t||this.collisionBorderDistances.left>t}anyLowerThan(t){return this.collisionBorderDistances.top<t||this.collisionBorderDistances.right<t||this.collisionBorderDistances.bottom<t||this.collisionBorderDistances.left<t}anyEquals(t){return this.collisionBorderDistances.top===t||this.collisionBorderDistances.right===t||this.collisionBorderDistances.bottom===t||this.collisionBorderDistances.left===t}}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var r=e[i]={exports:{}};return t[i](r,r.exports,n),r.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{n.r(i),n.d(i,{PinCollisionEvent:()=>t.PinCollisionEvent,ShareAttributeCollisionEvent:()=>e.ShareAttributeCollisionEvent});var t=n(444),e=n(579)})(),CollisionEvents=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,