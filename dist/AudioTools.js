var AudioTools;(()=>{"use strict";var t={28:(t,e,n)=>{n.d(e,{hideElement:()=>o});const r=new Map;function o(t){t.style.display="block",t.style.position="absolute",t.style.zIndex="-1",t.style.opacity="0",t.style.width="0px !important",t.style.height="0px !important",t.setAttribute("hidden","")}new Map,window.addEventListener("keydown",(t=>{for(const e of r)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},234:(t,e,n)=>{n.d(e,{getFileExtension:()=>o});var r=n(902);function o(t){if((0,r.isNullOrEmpty)(t))return"";const e=t.split(".").pop();if(e&&e!==t)return e;const n=t.split("/").pop();return n&&n!==t?n:""}},936:()=>{String.prototype.isNullOrEmpty=function(){return"string"!=typeof this&&!this&&""!==this},String.prototype.truncate=function(t,e="..."){return(this.length>t?this.substring(0,t)+e:this).toString()},String.prototype.removeAccents=function(){return this.normalize("NFD").replace(/[\u0300-\u036f]/g,"")},String.prototype.capitalizeFirstLetter=function(){return"string"!=typeof this?"":this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.zeroBefore=function(){return this.padStart(2,"0")}},902:(t,e,n)=>{function r(t){return"string"!=typeof t||!t||""===t}n.d(e,{isNullOrEmpty:()=>r})}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};(()=>{n.r(r),n.d(r,{audioElementHTML:()=>i,createInvisiblePlayer:()=>o,playButtonCSS:()=>s,sourceElementHTML:()=>a}),n(936);var t=n(28),e=n(234);function o(e,n){const r=document.createElement("div");r.classList.add("audio-container"),r.insertAdjacentHTML("afterbegin",i(e,n));const o=r.childNodes[0],a=function(t,e){const n=document.createElement("button");return n.classList.add("play-button"),setTimeout((()=>{t.paused&&n.classList.add("paused")}),300),n.addEventListener("click",(()=>{t.paused?(t.play(),n.classList.remove("paused")):(t.pause(),n.classList.add("paused"))})),function(t,e,n){e.addEventListener("play",(()=>{t.classList.remove("paused"),n&&n.onPlay&&n.onPlay(e),n&&n.onplay&&n.onplay(e)})),e.addEventListener("pause",(()=>{t.classList.add("paused"),n&&n.onPause&&n.onPause(e),n&&n.onpause&&n.onpause(e)}))}(n,t,e),n}(o,n);return r.insertAdjacentElement("beforeend",a),document.body.insertAdjacentElement("afterbegin",r),(0,t.hideElement)(o),(0,t.hideElement)(a),r}function i(t,e){return`<audio controls ${e?function(t){return` ${t.id?'id="'+t.id+'"':""} ${t.autoPlay||t.autoplay?"autoplay":""} ${t.muted?"muted":""} ${t.loop?"loop":""} ${t.preload?'preload="'+t.preload+'"':""}`.trimEnd()}(e):""}>\n    ${t.map((t=>a(t))).reduce(((t,e)=>t+e),"")}\n  </audio>`}function a(t){return`<source src="${t}" type="audio/${(0,e.getFileExtension)(t)}">`}function s(){return"\n    .play-button {\n      margin: 0;\n      padding: 0;\n      display: flex;\n      border: 0;\n      background: transparent;\n      box-sizing: border-box;\n      width: 0;\n      height: 34px;\n      border-color: transparent transparent transparent #202020;\n      transition: 100ms all ease;\n      cursor: pointer;\n      border-style: double;\n      border-width: 0px 0 0px 30px;\n    }\n\n    .play-button.paused {\n      border-style: solid;\n      border-width: 23px 0px 23px 34px;\n    }\n\n    .play-button:hover {\n      border-color: transparent transparent transparent #404040;\n    }\n  "}})(),AudioTools=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,