var NumberRaisingComponent;(()=>{"use strict";var n={813:(n,e,t)=>{t.d(e,{Component:()=>a});var r=t(676);class a{position;container;fadeInAnimation;fadeOutAnimation;constructor(n,e,t,r){this.container=n,this.fadeInAnimation=t,this.fadeOutAnimation=r,e&&this.setupPosition(e)}async build(n){n&&n.mainLayer&&n.mainLayer.element.insertAdjacentElement("beforeend",this.container),this.container.style.display="flex",this.fadeInAnimation&&await this.fadeInAnimation.animate(this)}setupPosition(n){this.position=n,this.container.style.position="absolute",this.container.style.display="none",this.container.style.left=n.horizontal,n.verticalReference===r.VERTICAL_REFERENCE.FROM_TOP?this.container.style.top=n.vertical:this.container.style.bottom=n.vertical}async destroy(){this.fadeOutAnimation&&await this.fadeOutAnimation.animate(this),this.container.style.display="none"}}},676:(n,e,t)=>{var r,a,i,o;t.d(e,{VERTICAL_REFERENCE:()=>i}),function(n){n[n.PIXEL=0]="PIXEL",n[n.PERCENTAGE=1]="PERCENTAGE"}(r||(r={})),function(n){n[n.HORIZONTAL=0]="HORIZONTAL",n[n.VERTICAL=1]="VERTICAL"}(a||(a={})),function(n){n[n.FROM_TOP=0]="FROM_TOP",n[n.FROM_BOTTOM=1]="FROM_BOTTOM"}(i||(i={})),function(n){n[n.R=0]="R",n[n.G=1]="G",n[n.B=2]="B",n[n.A=3]="A"}(o||(o={}))}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return n[r](i,i.exports,t),i.exports}t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var r={};(()=>{t.r(r),t.d(r,{NumberRaisingComponent:()=>an});var n={update:null,begin:null,loopBegin:null,changeBegin:null,change:null,changeComplete:null,loopComplete:null,complete:null,loop:1,direction:"normal",autoplay:!0,timelineOffset:0},e={duration:1e3,delay:0,endDelay:0,easing:"easeOutElastic(1, .5)",round:0},a=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY","perspective","matrix","matrix3d"],i={CSS:{},springs:{}};function o(n,e,t){return Math.min(Math.max(n,e),t)}function u(n,e){return n.indexOf(e)>-1}function s(n,e){return n.apply(null,e)}var c={arr:function(n){return Array.isArray(n)},obj:function(n){return u(Object.prototype.toString.call(n),"Object")},pth:function(n){return c.obj(n)&&n.hasOwnProperty("totalLength")},svg:function(n){return n instanceof SVGElement},inp:function(n){return n instanceof HTMLInputElement},dom:function(n){return n.nodeType||c.svg(n)},str:function(n){return"string"==typeof n},fnc:function(n){return"function"==typeof n},und:function(n){return void 0===n},nil:function(n){return c.und(n)||null===n},hex:function(n){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(n)},rgb:function(n){return/^rgb/.test(n)},hsl:function(n){return/^hsl/.test(n)},col:function(n){return c.hex(n)||c.rgb(n)||c.hsl(n)},key:function(t){return!n.hasOwnProperty(t)&&!e.hasOwnProperty(t)&&"targets"!==t&&"keyframes"!==t}};function l(n){var e=/\(([^)]+)\)/.exec(n);return e?e[1].split(",").map((function(n){return parseFloat(n)})):[]}function f(n,e){var t=l(n),r=o(c.und(t[0])?1:t[0],.1,100),a=o(c.und(t[1])?100:t[1],.1,100),u=o(c.und(t[2])?10:t[2],.1,100),s=o(c.und(t[3])?0:t[3],.1,100),f=Math.sqrt(a/r),d=u/(2*Math.sqrt(a*r)),p=d<1?f*Math.sqrt(1-d*d):0,m=d<1?(d*f-s)/p:-s+f;function h(n){var t=e?e*n/1e3:n;return t=d<1?Math.exp(-t*d*f)*(1*Math.cos(p*t)+m*Math.sin(p*t)):(1+m*t)*Math.exp(-t*f),0===n||1===n?n:1-t}return e?h:function(){var e=i.springs[n];if(e)return e;for(var t=1/6,r=0,a=0;;)if(1===h(r+=t)){if(++a>=16)break}else a=0;var o=r*t*1e3;return i.springs[n]=o,o}}function d(n){return void 0===n&&(n=10),function(e){return Math.ceil(o(e,1e-6,1)*n)*(1/n)}}var p,m,h=function(){var n=.1;function e(n,e){return 1-3*e+3*n}function t(n,e){return 3*e-6*n}function r(n){return 3*n}function a(n,a,i){return((e(a,i)*n+t(a,i))*n+r(a))*n}function i(n,a,i){return 3*e(a,i)*n*n+2*t(a,i)*n+r(a)}return function(e,t,r,o){if(0<=e&&e<=1&&0<=r&&r<=1){var u=new Float32Array(11);if(e!==t||r!==o)for(var s=0;s<11;++s)u[s]=a(s*n,e,r);return function(s){return e===t&&r===o||0===s||1===s?s:a(function(t){for(var o=0,s=1;10!==s&&u[s]<=t;++s)o+=n;--s;var c=o+(t-u[s])/(u[s+1]-u[s])*n,l=i(c,e,r);return l>=.001?function(n,e,t,r){for(var o=0;o<4;++o){var u=i(e,t,r);if(0===u)return e;e-=(a(e,t,r)-n)/u}return e}(t,c,e,r):0===l?c:function(n,e,t,r,i){var o,u,s=0;do{(o=a(u=e+(t-e)/2,r,i)-n)>0?t=u:e=u}while(Math.abs(o)>1e-7&&++s<10);return u}(t,o,o+n,e,r)}(s),t,o)}}}}(),v=(p={linear:function(){return function(n){return n}}},m={Sine:function(){return function(n){return 1-Math.cos(n*Math.PI/2)}},Circ:function(){return function(n){return 1-Math.sqrt(1-n*n)}},Back:function(){return function(n){return n*n*(3*n-2)}},Bounce:function(){return function(n){for(var e,t=4;n<((e=Math.pow(2,--t))-1)/11;);return 1/Math.pow(4,3-t)-7.5625*Math.pow((3*e-2)/22-n,2)}},Elastic:function(n,e){void 0===n&&(n=1),void 0===e&&(e=.5);var t=o(n,1,10),r=o(e,.1,2);return function(n){return 0===n||1===n?n:-t*Math.pow(2,10*(n-1))*Math.sin((n-1-r/(2*Math.PI)*Math.asin(1/t))*(2*Math.PI)/r)}}},["Quad","Cubic","Quart","Quint","Expo"].forEach((function(n,e){m[n]=function(){return function(n){return Math.pow(n,e+2)}}})),Object.keys(m).forEach((function(n){var e=m[n];p["easeIn"+n]=e,p["easeOut"+n]=function(n,t){return function(r){return 1-e(n,t)(1-r)}},p["easeInOut"+n]=function(n,t){return function(r){return r<.5?e(n,t)(2*r)/2:1-e(n,t)(-2*r+2)/2}},p["easeOutIn"+n]=function(n,t){return function(r){return r<.5?(1-e(n,t)(1-2*r))/2:(e(n,t)(2*r-1)+1)/2}}})),p);function g(n,e){if(c.fnc(n))return n;var t=n.split("(")[0],r=v[t],a=l(n);switch(t){case"spring":return f(n,e);case"cubicBezier":return s(h,a);case"steps":return s(d,a);default:return s(r,a)}}function y(n){try{return document.querySelectorAll(n)}catch(n){return}}function b(n,e){for(var t=n.length,r=arguments.length>=2?arguments[1]:void 0,a=[],i=0;i<t;i++)if(i in n){var o=n[i];e.call(r,o,i,n)&&a.push(o)}return a}function x(n){return n.reduce((function(n,e){return n.concat(c.arr(e)?x(e):e)}),[])}function M(n){return c.arr(n)?n:(c.str(n)&&(n=y(n)||n),n instanceof NodeList||n instanceof HTMLCollection?[].slice.call(n):[n])}function O(n,e){return n.some((function(n){return n===e}))}function w(n){var e={};for(var t in n)e[t]=n[t];return e}function C(n,e){var t=w(n);for(var r in n)t[r]=e.hasOwnProperty(r)?e[r]:n[r];return t}function I(n,e){var t=w(n);for(var r in e)t[r]=c.und(n[r])?e[r]:n[r];return t}function T(n){var e=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(n);if(e)return e[1]}function E(n,e){return c.fnc(n)?n(e.target,e.id,e.total):n}function P(n,e){return n.getAttribute(e)}function A(n,e,t){if(O([t,"deg","rad","turn"],T(e)))return e;var r=i.CSS[e+t];if(!c.und(r))return r;var a=document.createElement(n.tagName),o=n.parentNode&&n.parentNode!==document?n.parentNode:document.body;o.appendChild(a),a.style.position="absolute",a.style.width=100+t;var u=100/a.offsetWidth;o.removeChild(a);var s=u*parseFloat(e);return i.CSS[e+t]=s,s}function k(n,e,t){if(e in n.style){var r=e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),a=n.style[e]||getComputedStyle(n).getPropertyValue(r)||"0";return t?A(n,a,t):a}}function L(n,e){return c.dom(n)&&!c.inp(n)&&(!c.nil(P(n,e))||c.svg(n)&&n[e])?"attribute":c.dom(n)&&O(a,e)?"transform":c.dom(n)&&"transform"!==e&&k(n,e)?"css":null!=n[e]?"object":void 0}function B(n){if(c.dom(n)){for(var e,t=n.style.transform||"",r=/(\w+)\(([^)]*)\)/g,a=new Map;e=r.exec(t);)a.set(e[1],e[2]);return a}}function R(n,e,t,r){switch(L(n,e)){case"transform":return function(n,e,t,r){var a=u(e,"scale")?1:0+function(n){return u(n,"translate")||"perspective"===n?"px":u(n,"rotate")||u(n,"skew")?"deg":void 0}(e),i=B(n).get(e)||a;return t&&(t.transforms.list.set(e,i),t.transforms.last=e),r?A(n,i,r):i}(n,e,r,t);case"css":return k(n,e,t);case"attribute":return P(n,e);default:return n[e]||0}}function N(n,e){var t=/^(\*=|\+=|-=)/.exec(n);if(!t)return n;var r=T(n)||0,a=parseFloat(e),i=parseFloat(n.replace(t[0],""));switch(t[0][0]){case"+":return a+i+r;case"-":return a-i+r;case"*":return a*i+r}}function F(n,e){if(c.col(n))return function(n){return c.rgb(n)?(t=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(e=n))?"rgba("+t[1]+",1)":e:c.hex(n)?function(n){var e=n.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(n,e,t,r){return e+e+t+t+r+r})),t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return"rgba("+parseInt(t[1],16)+","+parseInt(t[2],16)+","+parseInt(t[3],16)+",1)"}(n):c.hsl(n)?function(n){var e,t,r,a=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(n)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(n),i=parseInt(a[1],10)/360,o=parseInt(a[2],10)/100,u=parseInt(a[3],10)/100,s=a[4]||1;function c(n,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?n+6*(e-n)*t:t<.5?e:t<2/3?n+(e-n)*(2/3-t)*6:n}if(0==o)e=t=r=u;else{var l=u<.5?u*(1+o):u+o-u*o,f=2*u-l;e=c(f,l,i+1/3),t=c(f,l,i),r=c(f,l,i-1/3)}return"rgba("+255*e+","+255*t+","+255*r+","+s+")"}(n):void 0;var e,t}(n);if(/\s/g.test(n))return n;var t=T(n),r=t?n.substr(0,n.length-t.length):n;return e?r+e:r}function S(n,e){return Math.sqrt(Math.pow(e.x-n.x,2)+Math.pow(e.y-n.y,2))}function D(n){for(var e,t=n.points,r=0,a=0;a<t.numberOfItems;a++){var i=t.getItem(a);a>0&&(r+=S(e,i)),e=i}return r}function j(n){if(n.getTotalLength)return n.getTotalLength();switch(n.tagName.toLowerCase()){case"circle":return function(n){return 2*Math.PI*P(n,"r")}(n);case"rect":return function(n){return 2*P(n,"width")+2*P(n,"height")}(n);case"line":return function(n){return S({x:P(n,"x1"),y:P(n,"y1")},{x:P(n,"x2"),y:P(n,"y2")})}(n);case"polyline":return D(n);case"polygon":return function(n){var e=n.points;return D(n)+S(e.getItem(e.numberOfItems-1),e.getItem(0))}(n)}}function V(n,e){var t=e||{},r=t.el||function(n){for(var e=n.parentNode;c.svg(e)&&c.svg(e.parentNode);)e=e.parentNode;return e}(n),a=r.getBoundingClientRect(),i=P(r,"viewBox"),o=a.width,u=a.height,s=t.viewBox||(i?i.split(" "):[0,0,o,u]);return{el:r,viewBox:s,x:s[0]/1,y:s[1]/1,w:o,h:u,vW:s[2],vH:s[3]}}function _(n,e,t){function r(t){void 0===t&&(t=0);var r=e+t>=1?e+t:0;return n.el.getPointAtLength(r)}var a=V(n.el,n.svg),i=r(),o=r(-1),u=r(1),s=t?1:a.w/a.vW,c=t?1:a.h/a.vH;switch(n.property){case"x":return(i.x-a.x)*s;case"y":return(i.y-a.y)*c;case"angle":return 180*Math.atan2(u.y-o.y,u.x-o.x)/Math.PI}}function H(n,e){var t=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g,r=F(c.pth(n)?n.totalLength:n,e)+"";return{original:r,numbers:r.match(t)?r.match(t).map(Number):[0],strings:c.str(n)||e?r.split(t):[]}}function q(n){return b(n?x(c.arr(n)?n.map(M):M(n)):[],(function(n,e,t){return t.indexOf(n)===e}))}function $(n){var e=q(n);return e.map((function(n,t){return{target:n,id:t,total:e.length,transforms:{list:B(n)}}}))}function G(n,e){var t=w(e);if(/^spring/.test(t.easing)&&(t.duration=f(t.easing)),c.arr(n)){var r=n.length;2!==r||c.obj(n[0])?c.fnc(e.duration)||(t.duration=e.duration/r):n={value:n}}var a=c.arr(n)?n:[n];return a.map((function(n,t){var r=c.obj(n)&&!c.pth(n)?n:{value:n};return c.und(r.delay)&&(r.delay=t?0:e.delay),c.und(r.endDelay)&&(r.endDelay=t===a.length-1?e.endDelay:0),r})).map((function(n){return I(n,t)}))}var W={css:function(n,e,t){return n.style[e]=t},attribute:function(n,e,t){return n.setAttribute(e,t)},object:function(n,e,t){return n[e]=t},transform:function(n,e,t,r,a){if(r.list.set(e,t),e===r.last||a){var i="";r.list.forEach((function(n,e){i+=e+"("+n+") "})),n.style.transform=i}}};function X(n,e){$(n).forEach((function(n){for(var t in e){var r=E(e[t],n),a=n.target,i=T(r),o=R(a,t,i,n),u=N(F(r,i||T(o)),o),s=L(a,t);W[s](a,t,u,n.transforms,!0)}}))}function Y(n,e){return b(x(n.map((function(n){return e.map((function(e){return function(n,e){var t=L(n.target,e.name);if(t){var r=function(n,e){var t;return n.tweens.map((function(r){var a=function(n,e){var t={};for(var r in n){var a=E(n[r],e);c.arr(a)&&1===(a=a.map((function(n){return E(n,e)}))).length&&(a=a[0]),t[r]=a}return t.duration=parseFloat(t.duration),t.delay=parseFloat(t.delay),t}(r,e),i=a.value,o=c.arr(i)?i[1]:i,u=T(o),s=R(e.target,n.name,u,e),l=t?t.to.original:s,f=c.arr(i)?i[0]:l,d=T(f)||T(s),p=u||d;return c.und(o)&&(o=l),a.from=H(f,p),a.to=H(N(o,f),p),a.start=t?t.end:0,a.end=a.start+a.delay+a.duration+a.endDelay,a.easing=g(a.easing,a.duration),a.isPath=c.pth(i),a.isPathTargetInsideSVG=a.isPath&&c.svg(e.target),a.isColor=c.col(a.from.original),a.isColor&&(a.round=1),t=a,a}))}(e,n),a=r[r.length-1];return{type:t,property:e.name,animatable:n,tweens:r,duration:a.end,delay:r[0].delay,endDelay:a.endDelay}}}(n,e)}))}))),(function(n){return!c.und(n)}))}function Z(n,e){var t=n.length,r=function(n){return n.timelineOffset?n.timelineOffset:0},a={};return a.duration=t?Math.max.apply(Math,n.map((function(n){return r(n)+n.duration}))):e.duration,a.delay=t?Math.min.apply(Math,n.map((function(n){return r(n)+n.delay}))):e.delay,a.endDelay=t?a.duration-Math.max.apply(Math,n.map((function(n){return r(n)+n.duration-n.endDelay}))):e.endDelay,a}var z=0,Q=[],J=function(){var n;function e(t){for(var r=Q.length,a=0;a<r;){var i=Q[a];i.paused?(Q.splice(a,1),r--):(i.tick(t),a++)}n=a>0?requestAnimationFrame(e):void 0}return"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){U.suspendWhenDocumentHidden&&(K()?n=cancelAnimationFrame(n):(Q.forEach((function(n){return n._onDocumentVisibility()})),J()))})),function(){n||K()&&U.suspendWhenDocumentHidden||!(Q.length>0)||(n=requestAnimationFrame(e))}}();function K(){return!!document&&document.hidden}function U(t){void 0===t&&(t={});var r,a=0,i=0,u=0,s=0,l=null;function f(n){var e=window.Promise&&new Promise((function(n){return l=n}));return n.finished=e,e}var d=function(t){var r=C(n,t),a=C(e,t),i=function(n,e){var t=[],r=e.keyframes;for(var a in r&&(e=I(function(n){for(var e=b(x(n.map((function(n){return Object.keys(n)}))),(function(n){return c.key(n)})).reduce((function(n,e){return n.indexOf(e)<0&&n.push(e),n}),[]),t={},r=function(r){var a=e[r];t[a]=n.map((function(n){var e={};for(var t in n)c.key(t)?t==a&&(e.value=n[t]):e[t]=n[t];return e}))},a=0;a<e.length;a++)r(a);return t}(r),e)),e)c.key(a)&&t.push({name:a,tweens:G(e[a],n)});return t}(a,t),o=$(t.targets),u=Y(o,i),s=Z(u,a),l=z;return z++,I(r,{id:l,children:[],animatables:o,animations:u,duration:s.duration,delay:s.delay,endDelay:s.endDelay})}(t);function p(){var n=d.direction;"alternate"!==n&&(d.direction="normal"!==n?"normal":"reverse"),d.reversed=!d.reversed,r.forEach((function(n){return n.reversed=d.reversed}))}function m(n){return d.reversed?d.duration-n:n}function h(){a=0,i=m(d.currentTime)*(1/U.speed)}function v(n,e){e&&e.seek(n-e.timelineOffset)}function g(n){for(var e=0,t=d.animations,r=t.length;e<r;){var a=t[e],i=a.animatable,u=a.tweens,s=u.length-1,c=u[s];s&&(c=b(u,(function(e){return n<e.end}))[0]||c);for(var l=o(n-c.start-c.delay,0,c.duration)/c.duration,f=isNaN(l)?1:c.easing(l),p=c.to.strings,m=c.round,h=[],v=c.to.numbers.length,g=void 0,y=0;y<v;y++){var x=void 0,M=c.to.numbers[y],O=c.from.numbers[y]||0;x=c.isPath?_(c.value,f*M,c.isPathTargetInsideSVG):O+f*(M-O),m&&(c.isColor&&y>2||(x=Math.round(x*m)/m)),h.push(x)}var w=p.length;if(w){g=p[0];for(var C=0;C<w;C++){p[C];var I=p[C+1],T=h[C];isNaN(T)||(g+=I?T+I:T+" ")}}else g=h[0];W[a.type](i.target,a.property,g,i.transforms),a.currentValue=g,e++}}function y(n){d[n]&&!d.passThrough&&d[n](d)}function M(n){var e=d.duration,t=d.delay,c=e-d.endDelay,h=m(n);d.progress=o(h/e*100,0,100),d.reversePlayback=h<d.currentTime,r&&function(n){if(d.reversePlayback)for(var e=s;e--;)v(n,r[e]);else for(var t=0;t<s;t++)v(n,r[t])}(h),!d.began&&d.currentTime>0&&(d.began=!0,y("begin")),!d.loopBegan&&d.currentTime>0&&(d.loopBegan=!0,y("loopBegin")),h<=t&&0!==d.currentTime&&g(0),(h>=c&&d.currentTime!==e||!e)&&g(e),h>t&&h<c?(d.changeBegan||(d.changeBegan=!0,d.changeCompleted=!1,y("changeBegin")),y("change"),g(h)):d.changeBegan&&(d.changeCompleted=!0,d.changeBegan=!1,y("changeComplete")),d.currentTime=o(h,0,e),d.began&&y("update"),n>=e&&(i=0,d.remaining&&!0!==d.remaining&&d.remaining--,d.remaining?(a=u,y("loopComplete"),d.loopBegan=!1,"alternate"===d.direction&&p()):(d.paused=!0,d.completed||(d.completed=!0,y("loopComplete"),y("complete"),!d.passThrough&&"Promise"in window&&(l(),f(d)))))}return f(d),d.reset=function(){var n=d.direction;d.passThrough=!1,d.currentTime=0,d.progress=0,d.paused=!0,d.began=!1,d.loopBegan=!1,d.changeBegan=!1,d.completed=!1,d.changeCompleted=!1,d.reversePlayback=!1,d.reversed="reverse"===n,d.remaining=d.loop,r=d.children;for(var e=s=r.length;e--;)d.children[e].reset();(d.reversed&&!0!==d.loop||"alternate"===n&&1===d.loop)&&d.remaining++,g(d.reversed?d.duration:0)},d._onDocumentVisibility=h,d.set=function(n,e){return X(n,e),d},d.tick=function(n){u=n,a||(a=u),M((u+(i-a))*U.speed)},d.seek=function(n){M(m(n))},d.pause=function(){d.paused=!0,h()},d.play=function(){d.paused&&(d.completed&&d.reset(),d.paused=!1,Q.push(d),h(),J())},d.reverse=function(){p(),d.completed=!d.reversed,h()},d.restart=function(){d.reset(),d.play()},d.remove=function(n){en(q(n),d)},d.reset(),d.autoplay&&d.play(),d}function nn(n,e){for(var t=e.length;t--;)O(n,e[t].animatable.target)&&e.splice(t,1)}function en(n,e){var t=e.animations,r=e.children;nn(n,t);for(var a=r.length;a--;){var i=r[a],o=i.animations;nn(n,o),o.length||i.children.length||r.splice(a,1)}t.length||r.length||e.pause()}U.version="3.2.1",U.speed=1,U.suspendWhenDocumentHidden=!0,U.running=Q,U.remove=function(n){for(var e=q(n),t=Q.length;t--;)en(e,Q[t])},U.get=R,U.set=X,U.convertPx=A,U.path=function(n,e){var t=c.str(n)?y(n)[0]:n,r=e||100;return function(n){return{property:n,el:t,svg:V(t),totalLength:j(t)*(r/100)}}},U.setDashoffset=function(n){var e=j(n);return n.setAttribute("stroke-dasharray",e),e},U.stagger=function(n,e){void 0===e&&(e={});var t=e.direction||"normal",r=e.easing?g(e.easing):null,a=e.grid,i=e.axis,o=e.from||0,u="first"===o,s="center"===o,l="last"===o,f=c.arr(n),d=f?parseFloat(n[0]):parseFloat(n),p=f?parseFloat(n[1]):0,m=T(f?n[1]:n)||0,h=e.start||0+(f?d:0),v=[],y=0;return function(n,e,c){if(u&&(o=0),s&&(o=(c-1)/2),l&&(o=c-1),!v.length){for(var g=0;g<c;g++){if(a){var b=s?(a[0]-1)/2:o%a[0],x=s?(a[1]-1)/2:Math.floor(o/a[0]),M=b-g%a[0],O=x-Math.floor(g/a[0]),w=Math.sqrt(M*M+O*O);"x"===i&&(w=-M),"y"===i&&(w=-O),v.push(w)}else v.push(Math.abs(o-g));y=Math.max.apply(Math,v)}r&&(v=v.map((function(n){return r(n/y)*y}))),"reverse"===t&&(v=v.map((function(n){return i?n<0?-1*n:-n:Math.abs(y-n)})))}return h+(f?(p-d)/y:d)*(Math.round(100*v[e])/100)+m}},U.timeline=function(n){void 0===n&&(n={});var t=U(n);return t.duration=0,t.add=function(r,a){var i=Q.indexOf(t),o=t.children;function u(n){n.passThrough=!0}i>-1&&Q.splice(i,1);for(var s=0;s<o.length;s++)u(o[s]);var l=I(r,C(e,n));l.targets=l.targets||n.targets;var f=t.duration;l.autoplay=!1,l.direction=t.direction,l.timelineOffset=c.und(a)?f:N(a,f),u(t),t.seek(l.timelineOffset);var d=U(l);u(d),o.push(d);var p=Z(o,n);return t.delay=p.delay,t.endDelay=p.endDelay,t.duration=p.duration,t.seek(0),t.reset(),t.autoplay&&t.play(),t},t},U.easing=g,U.penner=v,U.random=function(n,e){return Math.floor(Math.random()*(e-n+1))+n};const tn=U;var rn=t(813);class an extends rn.Component{static componentCounter=0;index;limit;element;animeIndex={index:0};constructor({container:n,element:e,position:t,options:r}){super(n,t),this.setupContainer(),this.index=r&&r.from?r.from:0,this.limit=r&&r.to?r.to:0,this.element=e,this.element.style.boxSizing="border-box",this.element.innerText=this.index.toString(),this.element.classList.add("number-raising"),this.fadeInAnimation=new on}setupContainer(){this.container.classList.add(`number-raise-container-${an.componentCounter}`),an.componentCounter++}}class on{async animate(n){return tn.timeline({easing:"linear"}).add({targets:n.element,keyframes:[{translateY:-5,opacity:0},{translateY:0,opacity:1}],easing:"linear",duration:400}).add({targets:n.animeIndex,index:n.limit,easing:"easeInOutExpo",round:1,duration:+(n.element.getAttribute("duration")||1e4).toString(),update:()=>{n.element.innerHTML=n.animeIndex.index.toString()}})}}})(),NumberRaisingComponent=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,