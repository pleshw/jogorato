var DraggableElement;(()=>{"use strict";var t={28:(t,e,n)=>{n.d(e,{clickEventToCoordinates:()=>s,getTransformCoordsFromElement:()=>r});var i=n(19);const o=new Map;function r(t){const e=(window.getComputedStyle(t).transform.match(i.regexNumberPattern)??[0,0]).map((t=>+t));return{x:void 0!==e[4]?Math.round(e[4]):0,y:void 0!==e[5]?Math.round(e[5]):0}}function s(t){if(t instanceof MouseEvent)return{x:t.clientX,y:t.clientY};if(t instanceof TouchEvent){const e=t.changedTouches[0];return{x:e.clientX,y:e.clientY}}throw"Event not Found"}new Map,window.addEventListener("keydown",(t=>{for(const e of o)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},19:(t,e,n)=>{n.d(e,{regexNumberPattern:()=>i});const i=/-?\d+\.?\d*/g},773:(t,e,n)=>{n.d(e,{MovableElement:()=>o});var i=n(28);class o{element;movingState;intervalUpdatePosition;constructor(t){if(!t)throw new Error("Null movable element. Please pass a valid element in constructor.");this.element=t,this.movingState={pos:{x:0,y:0},delta:{dx:0,dy:0}},this.intervalUpdatePosition=setInterval(this.updatePosition.bind(this),200)}get position(){return this.movingState.pos}set position(t){this.moveTo(t.x,t.y)}get x(){return this.movingState.pos.x}set x(t){this.moveTo(t,this.y)}get y(){return this.movingState.pos.y}set y(t){this.moveTo(this.x,t)}updatePosition(){this.movingState.pos=(0,i.getTransformCoordsFromElement)(this.element),this.movingState.delta.dx=0,this.movingState.delta.dy=0}moveTo(t,e){this.movingState.pos={x:t+this.movingState.delta.dx,y:e+this.movingState.delta.dy},this.element.style.transform=`translate(${this.movingState.pos.x}px, ${this.movingState.pos.y}px)`}static makeElementMovable(t){return new o(t)}}}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return t[i](r,r.exports,n),r.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{n.r(i),n.d(i,{DraggableElement:()=>o});var t=n(28),e=n(773);class o extends e.MovableElement{allowDraggingByInnerContent;draggingState;constructor(t,e=!0){if(!t)throw new Error("Null draggable element. Please pass a valid element in constructor.");super(t),this.allowDraggingByInnerContent=e,this.draggingState={grabbing:!1},this.element&&(this.element.addEventListener("pointerdown",this.start.bind(this)),this.element.addEventListener("pointerup",this.end.bind(this)),this.element.addEventListener("pointercancel",this.end.bind(this)),this.element.addEventListener("pointermove",this.move.bind(this)),this.element.addEventListener("touchstart",(t=>t.preventDefault())),this.element.addEventListener("dragstart",(t=>t.preventDefault())),this.intervalUpdatePosition=setInterval(this.updatePosition.bind(this),200))}set grabbing(t){this.draggingState.grabbing=t,this.grabbing?this.element.classList.add("dragging","grabbing"):this.element.classList.remove("dragging","grabbing")}get grabbing(){return this.draggingState.grabbing}start(e){const n=e instanceof MouseEvent,i=n&&0===e.button,o=e instanceof PointerEvent;if(n&&!i)return;if(!this.allowDraggingByInnerContent&&e.target!==this.element)return;this.grabbing=!0,e.stopPropagation();let{x:r,y:s}=(0,t.clickEventToCoordinates)(e);this.movingState.delta={dx:this.movingState.pos.x-r,dy:this.movingState.pos.y-s},o&&(this.draggingState.pointerId=e.pointerId,this.element.setPointerCapture(e.pointerId)),this.element.style.userSelect="none"}end(){this.grabbing=!1,this.element.style.userSelect=""}updatePosition(){this.grabbing||super.updatePosition()}move(e){const n=e instanceof PointerEvent;if(!this.grabbing)return;if(!this.allowDraggingByInnerContent&&!(e.target===this.element||n&&this.draggingState.pointerId===e.pointerId))return;e.stopPropagation();let{x:i,y:o}=(0,t.clickEventToCoordinates)(e);super.moveTo(i,o)}static makeElementDraggable(t){return new o(t)}static makeElementDraggableByQuerySelector(t){const e=document.querySelector(t);return e?new o(e):null}}})(),DraggableElement=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YUFBaUIyRSxhQUV4QyxJQUFNekQsS0FBSzJDLFNBQ1QsT0FHRixJQUFNM0MsS0FBS3dDLCtCQUNlMUQsRUFBTTRFLFNBQVcxRCxLQUFLakMsU0FBYXlGLEdBQWtCeEQsS0FBS3lDLGNBQWNtQixZQUFjOUUsRUFBTThFLFdBRWxILE9BSUo5RSxFQUFNNkUsa0JBRU4sSUFBSSxFQUFFbkYsRUFBQyxFQUFFSSxJQUFNLElBQUFDLHlCQUF5QkMsR0FFeEM0RCxNQUFNaEMsT0FBUWxDLEVBQUdJLEVBQ25CLENBRU8sMkJBQU9tRixDQUFzQmhHLEdBQ2xDLE9BQU8sSUFBSXdFLEVBQWtCeEUsRUFDL0IsQ0FFTywwQ0FBT2lHLENBQXFDQyxHQUNqRCxNQUFNbEcsRUFBVW1HLFNBQVNELGNBQWVBLEdBRXhDLE9BQU1sRyxFQUlDLElBQUl3RSxFQUFrQnhFLEdBSHBCLElBSVgsRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL0RPTVRvb2xzLnRzIiwid2VicGFjazovLy8uL01hdGhUb29scy50cyIsIndlYnBhY2s6Ly8vLi9Nb3ZhYmxlRWxlbWVudC50cyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vLi9EcmFnZ2FibGVFbGVtZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvaW50MkQsIHJlZ2V4TnVtYmVyUGF0dGVybiB9IGZyb20gJy4vTWF0aFRvb2xzJztcclxuaW1wb3J0IHsgQ29sbGlzaW9uRGlyZWN0aW9uQ2hlY2ssIENvbGxpc2lvbkJvcmRlckRpc3RhbmNlIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5leHBvcnQgdHlwZSBLZXlib2FyZEV2ZW50Q2FsbGJhY2sgPSAoIGV2dDogS2V5Ym9hcmRFdmVudCApID0+IHZvaWQ7XHJcblxyXG5leHBvcnQgY29uc3QgZGljdEtleXNCeUFjdGlvbiA9IG5ldyBNYXA8c3RyaW5nLCBLZXlib2FyZEV2ZW50Q2FsbGJhY2tbXT4oKTtcclxuZXhwb3J0IGZ1bmN0aW9uIGFkZEFjdGlvbktleSgga2V5OiBzdHJpbmcsIGV2ZW50OiBLZXlib2FyZEV2ZW50Q2FsbGJhY2sgKSB7XHJcbiAgaWYgKCBkaWN0S2V5c0J5QWN0aW9uLmhhcygga2V5ICkgKSB7XHJcbiAgICBkaWN0S2V5c0J5QWN0aW9uLnNldCgga2V5LCBbZXZlbnQsIC4uLmRpY3RLZXlzQnlBY3Rpb24uZ2V0KCBrZXkgKSFdIClcclxuICB9IGVsc2Uge1xyXG4gICAgZGljdEtleXNCeUFjdGlvbi5zZXQoIGtleSwgW2V2ZW50XSApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tFbGVtZW50Q29sbGlzaW9uKCBlbGVtZW50MTogSFRNTEVsZW1lbnQsIGVsZW1lbnQyOiBIVE1MRWxlbWVudCApOiBib29sZWFuIHtcclxuICBjb25zdCByZWN0MSA9IGVsZW1lbnQxLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gIGNvbnN0IHJlY3QyID0gZWxlbWVudDIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gIHJldHVybiAhKFxyXG4gICAgcmVjdDEudG9wID4gcmVjdDIuYm90dG9tIHx8XHJcbiAgICByZWN0MS5yaWdodCA8IHJlY3QyLmxlZnQgfHxcclxuICAgIHJlY3QxLmJvdHRvbSA8IHJlY3QyLnRvcCB8fFxyXG4gICAgcmVjdDEubGVmdCA+IHJlY3QyLnJpZ2h0XHJcbiAgKTtcclxufVxyXG5cclxuLy8vIEdldCB0aGUgZGVmYXVsdCBhdHRyaWJ1dGVzIGZyb20gdGhlIHRhcmdldCBlbGVtZW50XHJcbi8vLyBJZiBoYXZlIG5vdCBkZWZhdWx0IGF0dHJpYnV0ZSB3aXRoIHRoaXMgQGF0dHJpYnV0ZU5hbWUgb24gbWFwIHdpbGwgc2V0IHRoZSBjdXJyZW50IGF0dHJpYnV0ZSBhcyBkZWZhdWx0XHJcbi8vLyBJZiBoYXZlIG5vdCBkZWZhdWx0IGF0dHJpYnV0ZSB3aXRoIHRoaXMgQGF0dHJpYnV0ZU5hbWUgd2lsbCByZXR1cm4gYW4gZW1wdHkgc3RyaW5nXHJcbmV4cG9ydCBjb25zdCBtYXBEZWZhdWx0QXR0cmlidXRlc0J5RWxlbWVudCA9IG5ldyBNYXA8SFRNTEVsZW1lbnQsIE1hcDxzdHJpbmcsIHN0cmluZz4+KCk7XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0QXR0cmlidXRlRm9yVGFyZ2V0KCB0YXJnZXQ6IEhUTUxFbGVtZW50LCBhdHRyaWJ1dGVOYW1lOiBzdHJpbmcgKTogc3RyaW5nIHtcclxuICBpZiAoICFtYXBEZWZhdWx0QXR0cmlidXRlc0J5RWxlbWVudC5oYXMoIHRhcmdldCApICkge1xyXG4gICAgbWFwRGVmYXVsdEF0dHJpYnV0ZXNCeUVsZW1lbnQuc2V0KCB0YXJnZXQsIG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCkgKTtcclxuICB9XHJcblxyXG4gIGxldCByZXN1bHQ6IHN0cmluZyA9ICcnO1xyXG4gIGNvbnN0IGRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNCeU5hbWUgPSBtYXBEZWZhdWx0QXR0cmlidXRlc0J5RWxlbWVudC5nZXQoIHRhcmdldCApITtcclxuICBjb25zdCB0YXJnZXREZWZhdWx0QXR0cmlidXRlID0gIWRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNCeU5hbWUuaGFzKCBhdHRyaWJ1dGVOYW1lICkgPyB0YXJnZXQuZ2V0QXR0cmlidXRlKCBhdHRyaWJ1dGVOYW1lICkgOiBkZWZhdWx0QXR0cmlidXRlVmFsdWVzQnlOYW1lLmdldCggYXR0cmlidXRlTmFtZSApITtcclxuXHJcbiAgcmVzdWx0ID0gdGFyZ2V0RGVmYXVsdEF0dHJpYnV0ZSA/IHRhcmdldERlZmF1bHRBdHRyaWJ1dGUgOiAnJztcclxuICBzZXREZWZhdWx0QXR0cmlidXRlRm9yVGFyZ2V0KCB0YXJnZXQsIGF0dHJpYnV0ZU5hbWUsIHJlc3VsdCApO1xyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdEF0dHJpYnV0ZUZvclRhcmdldCggdGFyZ2V0OiBIVE1MRWxlbWVudCwgYXR0cmlidXRlTmFtZTogc3RyaW5nLCBuZXdEZWZhdWx0QXR0cmlidXRlOiBzdHJpbmcgKTogdm9pZCB7XHJcbiAgaWYgKCAhbWFwRGVmYXVsdEF0dHJpYnV0ZXNCeUVsZW1lbnQuaGFzKCB0YXJnZXQgKSApIHtcclxuICAgIG1hcERlZmF1bHRBdHRyaWJ1dGVzQnlFbGVtZW50LnNldCggdGFyZ2V0LCBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpICk7XHJcbiAgfVxyXG5cclxuICBtYXBEZWZhdWx0QXR0cmlidXRlc0J5RWxlbWVudC5nZXQoIHRhcmdldCApIS5zZXQoIGF0dHJpYnV0ZU5hbWUsIG5ld0RlZmF1bHRBdHRyaWJ1dGUgKTtcclxufVxyXG5cclxuLy8vIERpdmlkZSBvIGVsZW1lbnRvIEB0YXJnZXQgZW0gOSBcInF1YWRyYWRvc1wiIGlndWFpcyBlIHJldG9ybmEgZW0gcXVhaXMgcXVhZHJhZG9zIG8gZHJhZ2dhYmxlIGVzdMOhIGNvbGlkaW5kbyBjb20gbyB0YXJnZXRcclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbGxpc2lvbkRpcmVjdGlvbiggZHJhZ2dhYmxlOiBIVE1MRWxlbWVudCwgdGFyZ2V0OiBIVE1MRWxlbWVudCApOiBDb2xsaXNpb25EaXJlY3Rpb25DaGVjayB7XHJcbiAgY29uc3QgcmVjdDEgPSBkcmFnZ2FibGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgY29uc3QgcmVjdDIgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gIGNvbnN0IGlzVG9wID0gcmVjdDEuYm90dG9tID4gcmVjdDIudG9wICYmIHJlY3QxLnRvcCA8IHJlY3QyLnRvcCArIHJlY3QyLmhlaWdodCAvIDM7XHJcbiAgY29uc3QgaXNSaWdodCA9IHJlY3QxLmxlZnQgPCByZWN0Mi5yaWdodCAmJiByZWN0MS5yaWdodCA+IHJlY3QyLnJpZ2h0IC0gcmVjdDIud2lkdGggLyAzO1xyXG4gIGNvbnN0IGlzQ2VudGVyID0gcmVjdDEudG9wIDwgcmVjdDIuYm90dG9tICYmIHJlY3QxLmJvdHRvbSA+IHJlY3QyLnRvcCAmJiByZWN0MS5sZWZ0IDwgcmVjdDIucmlnaHQgJiYgcmVjdDEucmlnaHQgPiByZWN0Mi5sZWZ0O1xyXG4gIGNvbnN0IGlzQm90dG9tID0gcmVjdDEudG9wIDwgcmVjdDIuYm90dG9tIC0gcmVjdDIuaGVpZ2h0IC8gMyAmJiByZWN0MS5ib3R0b20gPiByZWN0Mi5ib3R0b20gLSByZWN0Mi5oZWlnaHQgLyAzO1xyXG4gIGNvbnN0IGlzTGVmdCA9IHJlY3QxLnJpZ2h0ID4gcmVjdDIubGVmdCAmJiByZWN0MS5sZWZ0IDwgcmVjdDIubGVmdCArIHJlY3QyLndpZHRoIC8gMztcclxuXHJcbiAgcmV0dXJuIHsgdG9wOiBpc1RvcCwgcmlnaHQ6IGlzUmlnaHQsIGNlbnRlcjogaXNDZW50ZXIsIGJvdHRvbTogaXNCb3R0b20sIGxlZnQ6IGlzTGVmdCB9O1xyXG59XHJcblxyXG4vLy8gcmV0dXJuIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIGRyYWdnYWJsZSB0byB0aGUgY2VudGVyIG9mIHRoZSB0YXJnZXQgZWxlbWVudCBmcm9tIGVhY2ggYm9yZGVyIFxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGlzdGFuY2VGcm9tQm9yZGVyKCBkcmFnZ2FibGU6IEhUTUxFbGVtZW50LCB0YXJnZXQ6IEhUTUxFbGVtZW50ICk6IENvbGxpc2lvbkJvcmRlckRpc3RhbmNlIHtcclxuICBjb25zdCByZWN0MSA9IGRyYWdnYWJsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICBjb25zdCByZWN0MiA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgY29uc3QgY2VudGVyID0ge1xyXG4gICAgeDogcmVjdDEubGVmdCArIHJlY3QxLndpZHRoIC8gMixcclxuICAgIHk6IHJlY3QxLnRvcCArIHJlY3QxLmhlaWdodCAvIDIsXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZGlzdGFuY2VGcm9tQm9yZGVyOiBDb2xsaXNpb25Cb3JkZXJEaXN0YW5jZSA9IHtcclxuICAgIHRvcDogY2VudGVyLnkgLSByZWN0Mi50b3AsXHJcbiAgICByaWdodDogcmVjdDIucmlnaHQgLSBjZW50ZXIueCxcclxuICAgIGJvdHRvbTogcmVjdDIuYm90dG9tIC0gY2VudGVyLnksXHJcbiAgICBsZWZ0OiBjZW50ZXIueCAtIHJlY3QyLmxlZnQsXHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIGRpc3RhbmNlRnJvbUJvcmRlcjtcclxufVxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgZXZ0ID0+IHtcclxuICBmb3IgKCBjb25zdCBwYWlyIG9mIGRpY3RLZXlzQnlBY3Rpb24gKSB7XHJcbiAgICBpZiAoIGV2dC5jb2RlID09PSBwYWlyWzBdICkge1xyXG4gICAgICBwYWlyWzFdLmZvckVhY2goIGtiRXZlbnQgPT4ga2JFdmVudCggZXZ0ICkgKTtcclxuICAgIH1cclxuICB9XHJcbn0gKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1Db29yZHNGcm9tRWxlbWVudCggZWxlbWVudDogSFRNTEVsZW1lbnQgKTogUG9pbnQyRCB7XHJcbiAgY29uc3QgYXJyQ29tcHV0ZWREcmFnZ2FibGVUcmFuc2xhdGUgPSAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtZW50ICkudHJhbnNmb3JtLm1hdGNoKCByZWdleE51bWJlclBhdHRlcm4gKSA/PyBbMCwgMF0gKS5tYXAoIG4gPT4gK24gKTtcclxuICByZXR1cm4ge1xyXG4gICAgeDogYXJyQ29tcHV0ZWREcmFnZ2FibGVUcmFuc2xhdGVbNF0gIT09IHVuZGVmaW5lZCA/IE1hdGgucm91bmQoIGFyckNvbXB1dGVkRHJhZ2dhYmxlVHJhbnNsYXRlWzRdICkgOiAwLFxyXG4gICAgeTogYXJyQ29tcHV0ZWREcmFnZ2FibGVUcmFuc2xhdGVbNV0gIT09IHVuZGVmaW5lZCA/IE1hdGgucm91bmQoIGFyckNvbXB1dGVkRHJhZ2dhYmxlVHJhbnNsYXRlWzVdICkgOiAwXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xpY2tFdmVudFRvQ29vcmRpbmF0ZXMoIGV2ZW50OiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCApIHtcclxuICBpZiAoIGV2ZW50IGluc3RhbmNlb2YgTW91c2VFdmVudCApIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6IGV2ZW50LmNsaWVudFgsXHJcbiAgICAgIHk6IGV2ZW50LmNsaWVudFlcclxuICAgIH07XHJcbiAgfSBlbHNlIGlmICggZXZlbnQgaW5zdGFuY2VvZiBUb3VjaEV2ZW50ICkge1xyXG4gICAgY29uc3QgdG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6IHRvdWNoLmNsaWVudFgsXHJcbiAgICAgIHk6IHRvdWNoLmNsaWVudFlcclxuICAgIH07XHJcbiAgfSBlbHNlIHtcclxuICAgIHRocm93IFwiRXZlbnQgbm90IEZvdW5kXCI7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGlkZUVsZW1lbnQoIGVsZW1lbnQ6IEhUTUxFbGVtZW50ICkge1xyXG4gIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgZWxlbWVudC5zdHlsZS56SW5kZXggPSAnLTEnO1xyXG4gIGVsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuICBlbGVtZW50LnN0eWxlLndpZHRoID0gJzBweCAhaW1wb3J0YW50JztcclxuICBlbGVtZW50LnN0eWxlLmhlaWdodCA9ICcwcHggIWltcG9ydGFudCc7XHJcbiAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdoaWRkZW4nLCAnJyApO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2xlZXBBc3luYyggbXM6IG51bWJlciApIHtcclxuICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oICggcmVzb2x2ZSApID0+IHNldFRpbWVvdXQoICgpID0+IHJlc29sdmUoKSwgbXMgKSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYmluZEVsZW1lbnRzQnlDaGVjayggdHJpZ2dlckVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQsIHRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBvbkNoZWNrOiBGdW5jdGlvbiwgb25VbmNoZWNrOiBGdW5jdGlvbiApIHtcclxuICBpZiAoIHRyaWdnZXJFbGVtZW50LmNoZWNrZWQgKSB7XHJcbiAgICBvbkNoZWNrKCB0YXJnZXRFbGVtZW50ICk7XHJcbiAgfVxyXG5cclxuICBjb25zdCB0cmlnZ2VyR3JvdXAgPSB0cmlnZ2VyRWxlbWVudC5uYW1lXHJcbiAgICA/IEFycmF5LmZyb20oIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGBbbmFtZT1cIiR7IHRyaWdnZXJFbGVtZW50Lm5hbWUgfVwiXWAgKSApXHJcbiAgICA6IFt0cmlnZ2VyRWxlbWVudF07XHJcblxyXG4gIHRyaWdnZXJHcm91cC5mb3JFYWNoKCB0ID0+IHQuYWRkRXZlbnRMaXN0ZW5lciggJ2NoYW5nZScsIGV2dCA9PiB7XHJcbiAgICBpZiAoIHRyaWdnZXJFbGVtZW50LmNoZWNrZWQgKSB7XHJcbiAgICAgIG9uQ2hlY2soIHRhcmdldEVsZW1lbnQsIGV2dCApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb25VbmNoZWNrKCB0YXJnZXRFbGVtZW50LCBldnQgKTtcclxuICAgIH1cclxuICB9ICkgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTW9iaWxlQnJvd3NlcigpIHtcclxuICByZXR1cm4gL0FuZHJvaWR8aVBob25lL2kudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNPblNjcmVlbiggZWxlbWVudDogSFRNTEVsZW1lbnQgKSB7XHJcbiAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgcmV0dXJuIChcclxuICAgIHJlY3QudG9wID49IDAgJiZcclxuICAgIHJlY3QubGVmdCA+PSAwICYmXHJcbiAgICByZWN0LmJvdHRvbSA8PSAoIHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0ICkgJiZcclxuICAgIHJlY3QucmlnaHQgPD0gKCB3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggKVxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBiaW5kRWxlbWVudFZpZXdJZkNoZWNrZWQoIHRyaWdnZXJFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50LCB0YXJnZXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50LCBvcHRpb25zID0ge1xyXG4gIG9uQ2hlY2s6ICggdHJpZ2dlckVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQsIHRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50ICkgPT4geyB9LFxyXG4gIG9uVW5jaGVjazogKCB0cmlnZ2VyRWxlbWVudDogSFRNTElucHV0RWxlbWVudCwgdGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQgKSA9PiB7IH1cclxufSApIHtcclxuICBiaW5kRWxlbWVudHNCeUNoZWNrKFxyXG4gICAgdHJpZ2dlckVsZW1lbnQsXHJcbiAgICB0YXJnZXRFbGVtZW50LFxyXG4gICAgKCBlbDogSFRNTEVsZW1lbnQgKSA9PiB7XHJcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoICdzaG93JyApO1xyXG4gICAgICBvcHRpb25zLm9uQ2hlY2soIHRyaWdnZXJFbGVtZW50LCB0YXJnZXRFbGVtZW50ICk7XHJcbiAgICB9LFxyXG4gICAgKCBlbDogSFRNTEVsZW1lbnQgKSA9PiB7XHJcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoICdzaG93JyApO1xyXG4gICAgICBvcHRpb25zLm9uVW5jaGVjayggdHJpZ2dlckVsZW1lbnQsIHRhcmdldEVsZW1lbnQgKTtcclxuICAgIH0sXHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlRnJvbVJhZGlvR3JvdXAoIGdyb3VwTmFtZTogc3RyaW5nICk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBgW25hbWU9JHsgZ3JvdXBOYW1lIH1dOmNoZWNrZWRgICkgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICBpZiAoIGVsICkge1xyXG4gICAgcmV0dXJuIGVsLnZhbHVlO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbi8vIFJldG9ybmEgdW1hIGZ1bsOnw6NvIHF1ZSBuw6NvIHZhaSBzZXIgY29tcGxldGFkYSBjYXNvIHNlamEgY2hhbWFkYSBub3ZhbWVudGUgZW0geyBkZWxheSB9IG1pbGlzc2VndW5kb3NcclxuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlRmFjdG9yeSggZnVuYzogRnVuY3Rpb24sIGRlbGF5OiBudW1iZXIgKTogRnVuY3Rpb24ge1xyXG4gIGxldCBpbkRlYm91bmNlOiBudW1iZXI7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnN0IGNvbnRleHQgPSB3aW5kb3c7XHJcbiAgICBjb25zdCBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgY2xlYXJUaW1lb3V0KCBpbkRlYm91bmNlICk7XHJcbiAgICBpbkRlYm91bmNlID0gd2luZG93LnNldFRpbWVvdXQoICgpID0+IGZ1bmMuYXBwbHkoIGNvbnRleHQsIGFyZ3MgKSwgZGVsYXkgKTtcclxuICB9O1xyXG59XHJcblxyXG4vLyBSZXRvcm5hIHVtYSBmdW7Dp8OjbyBxdWUgc8OzIHBvZGUgc2VyIGNvbXBsZXRhZGEgdW1hIHZleiBhIGNhZGEgeyBsaW1pdCB9IG1pbGlzc2VndW5kb3MgXHJcbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsZUZhY3RvcnkoIGZ1bmM6IEZ1bmN0aW9uLCBsaW1pdDogbnVtYmVyICk6IEZ1bmN0aW9uIHtcclxuICBsZXQgbGFzdEZ1bmM6IG51bWJlcjtcclxuICBsZXQgbGFzdFJhbjogbnVtYmVyO1xyXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gd2luZG93O1xyXG4gICAgY29uc3QgYXJncyA9IGFyZ3VtZW50cztcclxuICAgIGlmICggIWxhc3RSYW4gKSB7XHJcbiAgICAgIGZ1bmMuYXBwbHkoIGNvbnRleHQsIGFyZ3MgKTtcclxuICAgICAgbGFzdFJhbiA9IERhdGUubm93KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjbGVhclRpbWVvdXQoIGxhc3RGdW5jICk7XHJcbiAgICAgIGxhc3RGdW5jID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIERhdGUubm93KCkgLSBsYXN0UmFuID49IGxpbWl0ICkge1xyXG4gICAgICAgICAgZnVuYy5hcHBseSggY29udGV4dCwgYXJncyApO1xyXG4gICAgICAgICAgbGFzdFJhbiA9IERhdGUubm93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCBsaW1pdCAtICggRGF0ZS5ub3coKSAtIGxhc3RSYW4gKSApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNtb290aFNjcm9sbFRvKCBwb3M6IG51bWJlciApOiB2b2lkIHtcclxuICB3aW5kb3cuc2Nyb2xsVG8oIHtcclxuICAgIHRvcDogcG9zLFxyXG4gICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxyXG4gIH0gKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RPcHRpb25CeVRleHQoIGlkU2VsZWN0RWxlbWVudDogc3RyaW5nLCBzZWFyY2hUZXh0OiBzdHJpbmcsIGNvbnRhaW5zOiBib29sZWFuID0gZmFsc2UgKTogdm9pZCB7XHJcbiAgY29uc3Qgc2VsZWN0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBpZFNlbGVjdEVsZW1lbnQgKSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcclxuXHJcbiAgaWYgKCAhc2VsZWN0RWxlbWVudCApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGNvbnN0IG9wdGlvbnNFbGVtZW50b1NlbGVjdCA9IFsuLi5zZWxlY3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICdvcHRpb24nICldO1xyXG5cclxuICBsZXQgc2VsZWN0ZWRPcHRpb247XHJcbiAgaWYgKCBjb250YWlucyApIHtcclxuICAgIHNlbGVjdGVkT3B0aW9uID0gb3B0aW9uc0VsZW1lbnRvU2VsZWN0XHJcbiAgICAgIC5maWx0ZXIoIGVsID0+IGVsLnRleHRDb250ZW50ICYmIGVsLnRleHRDb250ZW50LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoIHNlYXJjaFRleHQudG9Mb3dlckNhc2UoKSApIClbMF0udmFsdWU7XHJcbiAgfSBlbHNlIHtcclxuICAgIHNlbGVjdGVkT3B0aW9uID0gb3B0aW9uc0VsZW1lbnRvU2VsZWN0XHJcbiAgICAgIC5maWx0ZXIoIGVsID0+IGVsLnRleHRDb250ZW50ICYmIGVsLnRleHRDb250ZW50LnRvTG93ZXJDYXNlKCkgPT09IHNlYXJjaFRleHQudG9Mb3dlckNhc2UoKSApWzBdLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc2VsZWN0RWxlbWVudC52YWx1ZSA9IHNlbGVjdGVkT3B0aW9uO1xyXG59XHJcblxyXG4iLCJleHBvcnQgY29uc3QgcmVnZXhOdW1iZXJQYXR0ZXJuID0gLy0/XFxkK1xcLj9cXGQqL2c7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBvaW50MkQge1xyXG4gIHg6IG51bWJlcjtcclxuICB5OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGltZW5zaW9ucyB7XHJcbiAgd2lkdGg6IG51bWJlcjtcclxuICBoZWlnaHQ6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluZGV4VG9Sb3coIGluZGV4OiBudW1iZXIsIGdyaWRXaWR0aDogbnVtYmVyICkge1xyXG4gIHJldHVybiBNYXRoLmZsb29yKCBpbmRleCAvIGdyaWRXaWR0aCApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhUb0NvbCggaW5kZXg6IG51bWJlciwgZ3JpZFdpZHRoOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIGluZGV4ICUgZ3JpZFdpZHRoO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm93Q29sVG9JbmRleCggcm93OiBudW1iZXIsIGNvbDogbnVtYmVyLCB3aWR0aDogbnVtYmVyICkge1xyXG4gIHJldHVybiAoIHJvdyAqIHdpZHRoICkgKyBjb2w7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGVycCggbWluOiBudW1iZXIsIG1heDogbnVtYmVyLCBhbW91bnQ6IG51bWJlciApOiBudW1iZXIge1xyXG4gIHJldHVybiAoIDEgLSBhbW91bnQgKSAqIG1pbiArIGFtb3VudCAqIG1heDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2VMZXJwKCBhOiBudW1iZXIsIGI6IG51bWJlciwgdmFsOiBudW1iZXIgKTogbnVtYmVyIHtcclxuICByZXR1cm4gKCB2YWwgLSBhICkgLyAoIGIgLSBhICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1hcCggaW5NaW46IG51bWJlciwgaW5NYXg6IG51bWJlciwgb3V0TWluOiBudW1iZXIsIG91dE1heDogbnVtYmVyLCB2YWw6IG51bWJlciApOiBudW1iZXIge1xyXG4gIHJldHVybiBsZXJwKCBvdXRNaW4sIG91dE1heCwgaW52ZXJzZUxlcnAoIGluTWluLCBpbk1heCwgdmFsICkgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUludEV4Y2x1c2l2ZSggbWluOiBudW1iZXIsIG1heDogbnVtYmVyICkge1xyXG4gIHJldHVybiBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogKCBtYXggLSBtaW4gKSArIG1pbiApO1xyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21JbnRJbmNsdXNpdmUoIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciApIHtcclxuICBtaW4gPSBNYXRoLmNlaWwoIG1pbiApO1xyXG4gIG1heCA9IE1hdGguZmxvb3IoIG1heCApO1xyXG4gIHJldHVybiBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogKCBtYXggLSBtaW4gKyAxICkgKSArIG1pbjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUZyb21BcnJheTxUPiggYXJyOiBBcnJheTxUPiApIHtcclxuICByZXR1cm4gYXJyW2dldFJhbmRvbUludEV4Y2x1c2l2ZSggMCwgYXJyLmxlbmd0aCApXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wKCBudW06IG51bWJlciA9IDAsIG1pbjogbnVtYmVyID0gMCwgbWF4OiBudW1iZXIgPSAxMDAgKTogbnVtYmVyIHtcclxuICByZXR1cm4gTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG51bSwgbWF4ICkgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbnV0ZXNUb01pbGxpc2Vjb25kcyggbXM6IG51bWJlciApIHtcclxuICByZXR1cm4gbXMgKiA2MDAwMDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbGxpc2Vjb25kc1RvTWludXRlcyggbXM6IG51bWJlciApIHtcclxuICByZXR1cm4gbXMgLyA2MDAwMDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbGxpc2Vjb25kc1RvSG91cnMoIG1zOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIG1zIC8gMy42ZSs2O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWlsbGlzZWNvbmRzVG9EYXlzKCBtczogbnVtYmVyICkge1xyXG4gIHJldHVybiBtcyAvIDguNjRlKzc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtZWdhYnl0ZVRvQnl0ZSggbWI6IG51bWJlciApIHtcclxuICByZXR1cm4gbWIgKiAxMDI0ICogMTAyNDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVUb01lZ2FieXRlKCBiOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIGIgLyAxMDI0IC8gMTAyNDtcclxufSIsImltcG9ydCB7IGdldFRyYW5zZm9ybUNvb3Jkc0Zyb21FbGVtZW50IH0gZnJvbSAnLi9ET01Ub29scyc7XHJcbmltcG9ydCB7IFBvaW50MkQsIHJlZ2V4TnVtYmVyUGF0dGVybiB9IGZyb20gJy4vTWF0aFRvb2xzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudE1vdmluZ1N0YXRlIHtcclxuICBwb3M6IFBvaW50MkQ7XHJcbiAgZGVsdGE6IHtcclxuICAgIGR4OiBudW1iZXIsXHJcbiAgICBkeTogbnVtYmVyXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1vdmFibGVFbGVtZW50IHtcclxuICBwdWJsaWMgcmVhZG9ubHkgZWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgcHJvdGVjdGVkIG1vdmluZ1N0YXRlOiBFbGVtZW50TW92aW5nU3RhdGU7XHJcbiAgcHVibGljIGludGVydmFsVXBkYXRlUG9zaXRpb246IE5vZGVKUy5UaW1lb3V0O1xyXG5cclxuICBjb25zdHJ1Y3RvciggZWxlbWVudDogSFRNTEVsZW1lbnQgKSB7XHJcbiAgICBpZiAoICFlbGVtZW50ICkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoIFwiTnVsbCBtb3ZhYmxlIGVsZW1lbnQuIFBsZWFzZSBwYXNzIGEgdmFsaWQgZWxlbWVudCBpbiBjb25zdHJ1Y3Rvci5cIiApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcblxyXG4gICAgdGhpcy5tb3ZpbmdTdGF0ZSA9IHtcclxuICAgICAgcG9zOiB7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIGRlbHRhOiB7XHJcbiAgICAgICAgZHg6IDAsXHJcbiAgICAgICAgZHk6IDBcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmludGVydmFsVXBkYXRlUG9zaXRpb24gPSBzZXRJbnRlcnZhbCggdGhpcy51cGRhdGVQb3NpdGlvbi5iaW5kKCB0aGlzICksIDIwMCApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBwb3NpdGlvbigpOiBQb2ludDJEIHtcclxuICAgIHJldHVybiB0aGlzLm1vdmluZ1N0YXRlLnBvcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgcG9zaXRpb24oIG5ld1BvczogUG9pbnQyRCApIHtcclxuICAgIHRoaXMubW92ZVRvKCBuZXdQb3MueCwgbmV3UG9zLnkgKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB4KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5tb3ZpbmdTdGF0ZS5wb3MueDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgeCggbmV3WDogbnVtYmVyICkge1xyXG4gICAgdGhpcy5tb3ZlVG8oIG5ld1gsIHRoaXMueSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB5KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5tb3ZpbmdTdGF0ZS5wb3MueTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgeSggbmV3WTogbnVtYmVyICkge1xyXG4gICAgdGhpcy5tb3ZlVG8oIHRoaXMueCwgbmV3WSApO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHVwZGF0ZVBvc2l0aW9uKCk6IHZvaWQge1xyXG4gICAgdGhpcy5tb3ZpbmdTdGF0ZS5wb3MgPSBnZXRUcmFuc2Zvcm1Db29yZHNGcm9tRWxlbWVudCggdGhpcy5lbGVtZW50ICk7XHJcblxyXG4gICAgdGhpcy5tb3ZpbmdTdGF0ZS5kZWx0YS5keCA9IDA7XHJcbiAgICB0aGlzLm1vdmluZ1N0YXRlLmRlbHRhLmR5ID0gMDtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBtb3ZlVG8oIHg6IG51bWJlciwgeTogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgdGhpcy5tb3ZpbmdTdGF0ZS5wb3MgPSB7IHg6IHggKyB0aGlzLm1vdmluZ1N0YXRlLmRlbHRhLmR4LCB5OiB5ICsgdGhpcy5tb3ZpbmdTdGF0ZS5kZWx0YS5keSB9O1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7IHRoaXMubW92aW5nU3RhdGUucG9zLnggfXB4LCAkeyB0aGlzLm1vdmluZ1N0YXRlLnBvcy55IH1weClgO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBtYWtlRWxlbWVudE1vdmFibGUoIGVsZW1lbnQ6IEhUTUxFbGVtZW50ICk6IE1vdmFibGVFbGVtZW50IHtcclxuICAgIHJldHVybiBuZXcgTW92YWJsZUVsZW1lbnQoIGVsZW1lbnQgKTtcclxuICB9XHJcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB7IGNsaWNrRXZlbnRUb0Nvb3JkaW5hdGVzIH0gZnJvbSAnLi9ET01Ub29scyc7XHJcbmltcG9ydCB7IE1vdmFibGVFbGVtZW50IH0gZnJvbSAnLi9Nb3ZhYmxlRWxlbWVudCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEVsZW1lbnREcmFnZ2luZ1N0YXRlIHtcclxuICBwb2ludGVySWQ/OiBudW1iZXI7XHJcbiAgZ3JhYmJpbmc6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEcmFnZ2FibGVFbGVtZW50IGV4dGVuZHMgTW92YWJsZUVsZW1lbnQge1xyXG4gIHB1YmxpYyBhbGxvd0RyYWdnaW5nQnlJbm5lckNvbnRlbnQ6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBkcmFnZ2luZ1N0YXRlOiBFbGVtZW50RHJhZ2dpbmdTdGF0ZTtcclxuXHJcbiAgY29uc3RydWN0b3IoIGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBhbGxvd0RyYWdnaW5nQnlJbm5lckNvbnRlbnQ6IGJvb2xlYW4gPSB0cnVlICkge1xyXG4gICAgaWYgKCAhZWxlbWVudCApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIk51bGwgZHJhZ2dhYmxlIGVsZW1lbnQuIFBsZWFzZSBwYXNzIGEgdmFsaWQgZWxlbWVudCBpbiBjb25zdHJ1Y3Rvci5cIiApO1xyXG4gICAgfVxyXG5cclxuICAgIHN1cGVyKCBlbGVtZW50ICk7XHJcblxyXG4gICAgdGhpcy5hbGxvd0RyYWdnaW5nQnlJbm5lckNvbnRlbnQgPSBhbGxvd0RyYWdnaW5nQnlJbm5lckNvbnRlbnQ7XHJcblxyXG4gICAgdGhpcy5kcmFnZ2luZ1N0YXRlID0ge1xyXG4gICAgICBncmFiYmluZzogZmFsc2UsXHJcbiAgICB9O1xyXG5cclxuICAgIGlmICggIXRoaXMuZWxlbWVudCApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAncG9pbnRlcmRvd24nLCB0aGlzLnN0YXJ0LmJpbmQoIHRoaXMgKSApO1xyXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdwb2ludGVydXAnLCB0aGlzLmVuZC5iaW5kKCB0aGlzICkgKTtcclxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAncG9pbnRlcmNhbmNlbCcsIHRoaXMuZW5kLmJpbmQoIHRoaXMgKSApO1xyXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdwb2ludGVybW92ZScsIHRoaXMubW92ZS5iaW5kKCB0aGlzICkgKVxyXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd0b3VjaHN0YXJ0JywgKCBlICkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpICk7XHJcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2RyYWdzdGFydCcsICggZSApID0+IGUucHJldmVudERlZmF1bHQoKSApO1xyXG5cclxuICAgIHRoaXMuaW50ZXJ2YWxVcGRhdGVQb3NpdGlvbiA9IHNldEludGVydmFsKCB0aGlzLnVwZGF0ZVBvc2l0aW9uLmJpbmQoIHRoaXMgKSwgMjAwICk7XHJcbiAgfVxyXG5cclxuICBzZXQgZ3JhYmJpbmcoIHZhbDogYm9vbGVhbiApIHtcclxuICAgIHRoaXMuZHJhZ2dpbmdTdGF0ZS5ncmFiYmluZyA9IHZhbDtcclxuICAgIGlmICggdGhpcy5ncmFiYmluZyApIHtcclxuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoIFwiZHJhZ2dpbmdcIiwgXCJncmFiYmluZ1wiICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSggXCJkcmFnZ2luZ1wiLCBcImdyYWJiaW5nXCIgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBncmFiYmluZygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmRyYWdnaW5nU3RhdGUuZ3JhYmJpbmc7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXJ0KCBldmVudDogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQgKTogdm9pZCB7XHJcbiAgICBjb25zdCBpc01vdXNlRXZlbnQgPSBldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQ7XHJcbiAgICBjb25zdCBpc0xlZnRCdXR0b24gPSBpc01vdXNlRXZlbnQgJiYgZXZlbnQuYnV0dG9uID09PSAwO1xyXG4gICAgY29uc3QgaXNQb2ludGVyRXZlbnQgPSBldmVudCBpbnN0YW5jZW9mIFBvaW50ZXJFdmVudDtcclxuXHJcbiAgICBpZiAoIGlzTW91c2VFdmVudCAmJiAhaXNMZWZ0QnV0dG9uICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCAhdGhpcy5hbGxvd0RyYWdnaW5nQnlJbm5lckNvbnRlbnQgKSB7XHJcbiAgICAgIGNvbnN0IGlzQ29ycmVjdFRhcmdldCA9IGV2ZW50LnRhcmdldCA9PT0gdGhpcy5lbGVtZW50O1xyXG4gICAgICBpZiAoICFpc0NvcnJlY3RUYXJnZXQgKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ncmFiYmluZyA9IHRydWU7XHJcblxyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIGZvciBuZXN0ZWQgZHJhZ2dhYmxlc1xyXG5cclxuICAgIGxldCB7IHgsIHkgfSA9IGNsaWNrRXZlbnRUb0Nvb3JkaW5hdGVzKCBldmVudCApO1xyXG5cclxuICAgIHRoaXMubW92aW5nU3RhdGUuZGVsdGEgPSB7IGR4OiB0aGlzLm1vdmluZ1N0YXRlLnBvcy54IC0geCwgZHk6IHRoaXMubW92aW5nU3RhdGUucG9zLnkgLSB5IH07XHJcblxyXG4gICAgaWYgKCBpc1BvaW50ZXJFdmVudCApIHtcclxuICAgICAgdGhpcy5kcmFnZ2luZ1N0YXRlLnBvaW50ZXJJZCA9IGV2ZW50LnBvaW50ZXJJZDsgLy8ga2VlcCB0cmFjayBvZiBmaW5nZXJcclxuICAgICAgdGhpcy5lbGVtZW50LnNldFBvaW50ZXJDYXB0dXJlKCBldmVudC5wb2ludGVySWQgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmVsZW1lbnQuc3R5bGUudXNlclNlbGVjdCA9ICdub25lJzsgLy8gaWYgdGhlcmUncyB0ZXh0XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGVuZCgpOiB2b2lkIHtcclxuICAgIHRoaXMuZ3JhYmJpbmcgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQuc3R5bGUudXNlclNlbGVjdCA9ICcnOyAvLyBpZiB0aGVyZSdzIHRleHRcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCB1cGRhdGVQb3NpdGlvbigpOiB2b2lkIHtcclxuICAgIGlmICggdGhpcy5ncmFiYmluZyApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHN1cGVyLnVwZGF0ZVBvc2l0aW9uKCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgbW92ZSggZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50ICk6IHZvaWQge1xyXG4gICAgY29uc3QgaXNQb2ludGVyRXZlbnQgPSBldmVudCBpbnN0YW5jZW9mIFBvaW50ZXJFdmVudDtcclxuXHJcbiAgICBpZiAoICF0aGlzLmdyYWJiaW5nICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCAhdGhpcy5hbGxvd0RyYWdnaW5nQnlJbm5lckNvbnRlbnQgKSB7XHJcbiAgICAgIGNvbnN0IGlzQ29ycmVjdFRhcmdldCA9IGV2ZW50LnRhcmdldCA9PT0gdGhpcy5lbGVtZW50IHx8ICggaXNQb2ludGVyRXZlbnQgJiYgdGhpcy5kcmFnZ2luZ1N0YXRlLnBvaW50ZXJJZCA9PT0gZXZlbnQucG9pbnRlcklkICk7XHJcbiAgICAgIGlmICggIWlzQ29ycmVjdFRhcmdldCApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsgLy8gZm9yIG5lc3RlZCBkcmFnZ2FibGVzXHJcblxyXG4gICAgbGV0IHsgeCwgeSB9ID0gY2xpY2tFdmVudFRvQ29vcmRpbmF0ZXMoIGV2ZW50ICk7XHJcblxyXG4gICAgc3VwZXIubW92ZVRvKCB4LCB5ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIG1ha2VFbGVtZW50RHJhZ2dhYmxlKCBlbGVtZW50OiBIVE1MRWxlbWVudCApOiBEcmFnZ2FibGVFbGVtZW50IHtcclxuICAgIHJldHVybiBuZXcgRHJhZ2dhYmxlRWxlbWVudCggZWxlbWVudCApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBtYWtlRWxlbWVudERyYWdnYWJsZUJ5UXVlcnlTZWxlY3RvciggcXVlcnlTZWxlY3Rvcjogc3RyaW5nICk6IERyYWdnYWJsZUVsZW1lbnQgfCBudWxsIHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBxdWVyeVNlbGVjdG9yICk7XHJcblxyXG4gICAgaWYgKCAhZWxlbWVudCApIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBEcmFnZ2FibGVFbGVtZW50KCBlbGVtZW50IGFzIEhUTUxFbGVtZW50ICk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJkaWN0S2V5c0J5QWN0aW9uIiwiTWFwIiwiZ2V0VHJhbnNmb3JtQ29vcmRzRnJvbUVsZW1lbnQiLCJlbGVtZW50IiwiYXJyQ29tcHV0ZWREcmFnZ2FibGVUcmFuc2xhdGUiLCJ3aW5kb3ciLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNmb3JtIiwibWF0Y2giLCJyZWdleE51bWJlclBhdHRlcm4iLCJtYXAiLCJuIiwieCIsInVuZGVmaW5lZCIsIk1hdGgiLCJyb3VuZCIsInkiLCJjbGlja0V2ZW50VG9Db29yZGluYXRlcyIsImV2ZW50IiwiTW91c2VFdmVudCIsImNsaWVudFgiLCJjbGllbnRZIiwiVG91Y2hFdmVudCIsInRvdWNoIiwiY2hhbmdlZFRvdWNoZXMiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwicGFpciIsImNvZGUiLCJmb3JFYWNoIiwia2JFdmVudCIsIk1vdmFibGVFbGVtZW50IiwibW92aW5nU3RhdGUiLCJpbnRlcnZhbFVwZGF0ZVBvc2l0aW9uIiwiY29uc3RydWN0b3IiLCJFcnJvciIsInRoaXMiLCJwb3MiLCJkZWx0YSIsImR4IiwiZHkiLCJzZXRJbnRlcnZhbCIsInVwZGF0ZVBvc2l0aW9uIiwiYmluZCIsInBvc2l0aW9uIiwibmV3UG9zIiwibW92ZVRvIiwibmV3WCIsIm5ld1kiLCJzdHlsZSIsIm1ha2VFbGVtZW50TW92YWJsZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwiRHJhZ2dhYmxlRWxlbWVudCIsImFsbG93RHJhZ2dpbmdCeUlubmVyQ29udGVudCIsImRyYWdnaW5nU3RhdGUiLCJzdXBlciIsImdyYWJiaW5nIiwic3RhcnQiLCJlbmQiLCJtb3ZlIiwiZSIsInByZXZlbnREZWZhdWx0IiwidmFsIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiaXNNb3VzZUV2ZW50IiwiaXNMZWZ0QnV0dG9uIiwiYnV0dG9uIiwiaXNQb2ludGVyRXZlbnQiLCJQb2ludGVyRXZlbnQiLCJ0YXJnZXQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb2ludGVySWQiLCJzZXRQb2ludGVyQ2FwdHVyZSIsInVzZXJTZWxlY3QiLCJtYWtlRWxlbWVudERyYWdnYWJsZSIsIm1ha2VFbGVtZW50RHJhZ2dhYmxlQnlRdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsImRvY3VtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==